
QUTMS_MCISO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003810  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a34  08003a34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a3c  08003a3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08003ab4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003ab4  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010678  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002703  00000000  00000000  00030711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  00032e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  00033790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002180d  00000000  00000000  00033ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7b8  00000000  00000000  000557fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf6ff  00000000  00000000  00060fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001206b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf4  00000000  00000000  00120708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000070 	.word	0x20000070
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800397c 	.word	0x0800397c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000074 	.word	0x20000074
 80001c0:	0800397c 	.word	0x0800397c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <queue_init>:
#include "queue.h"

#include <string.h>

bool queue_init(message_queue_t *queue, size_t queue_item_size,
		size_t queue_length) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	// assumes queue is an empty struct
	queue->queue_items = calloc(queue_length, queue_item_size);
 80004c8:	68b9      	ldr	r1, [r7, #8]
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f002 fd3e 	bl	8002f4c <calloc>
 80004d0:	4603      	mov	r3, r0
 80004d2:	461a      	mov	r2, r3
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	601a      	str	r2, [r3, #0]

	if (queue->queue_items == NULL) {
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d101      	bne.n	80004e4 <queue_init+0x28>
		// calloc failed
		return false;
 80004e0:	2300      	movs	r3, #0
 80004e2:	e013      	b.n	800050c <queue_init+0x50>
	}

	queue->queue_item_size = queue_item_size;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	605a      	str	r2, [r3, #4]
	queue->queue_length = queue_length;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	609a      	str	r2, [r3, #8]

	queue->count = 0;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	739a      	strb	r2, [r3, #14]
	queue->head = 0;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2200      	movs	r2, #0
 80004fa:	731a      	strb	r2, [r3, #12]
	queue->tail = queue->queue_length - 1;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	3b01      	subs	r3, #1
 8000504:	b2da      	uxtb	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	735a      	strb	r2, [r3, #13]

	return true;
 800050a:	2301      	movs	r3, #1
}
 800050c:	4618      	mov	r0, r3
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <queue_add>:
	queue->tail =  queue->queue_length - 1;

	return true;
}

bool queue_add(message_queue_t *queue, void *item) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	if (queue->count <  queue->queue_length) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	7b9b      	ldrb	r3, [r3, #14]
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	429a      	cmp	r2, r3
 800052a:	d225      	bcs.n	8000578 <queue_add+0x64>
		queue->tail = (queue->tail + 1) %  queue->queue_length;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7b5b      	ldrb	r3, [r3, #13]
 8000530:	3301      	adds	r3, #1
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	fbb2 f1f3 	udiv	r1, r2, r3
 800053c:	fb03 f301 	mul.w	r3, r3, r1
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	b2da      	uxtb	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	735a      	strb	r2, [r3, #13]
		memcpy(queue->queue_items + (queue->tail * queue->queue_item_size), item, queue->queue_item_size);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7b5b      	ldrb	r3, [r3, #13]
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	fb03 f301 	mul.w	r3, r3, r1
 800055a:	18d0      	adds	r0, r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	461a      	mov	r2, r3
 8000562:	6839      	ldr	r1, [r7, #0]
 8000564:	f002 fd24 	bl	8002fb0 <memcpy>
		queue->count++;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7b9b      	ldrb	r3, [r3, #14]
 800056c:	3301      	adds	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	739a      	strb	r2, [r3, #14]

		return true;
 8000574:	2301      	movs	r3, #1
 8000576:	e000      	b.n	800057a <queue_add+0x66>
	} else {
		// queue is full
		return false;
 8000578:	2300      	movs	r3, #0
	}
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <queue_next>:
	} else {
		return false;
	}
}

bool queue_next(message_queue_t *queue, void *next) {
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	6039      	str	r1, [r7, #0]
	if (queue->count > 0) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7b9b      	ldrb	r3, [r3, #14]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d025      	beq.n	80005e0 <queue_next+0x5e>
		// copy next item into pointer
		memcpy(next, queue->queue_items + (queue->head * queue->queue_item_size), queue->queue_item_size);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7b1b      	ldrb	r3, [r3, #12]
 800059c:	4619      	mov	r1, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	fb03 f301 	mul.w	r3, r3, r1
 80005a6:	18d1      	adds	r1, r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	461a      	mov	r2, r3
 80005ae:	6838      	ldr	r0, [r7, #0]
 80005b0:	f002 fcfe 	bl	8002fb0 <memcpy>

		// increase head pointer
		queue->head = (queue->head + 1) %  queue->queue_length;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7b1b      	ldrb	r3, [r3, #12]
 80005b8:	3301      	adds	r3, #1
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80005c4:	fb03 f301 	mul.w	r3, r3, r1
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	731a      	strb	r2, [r3, #12]
		queue->count--;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7b9b      	ldrb	r3, [r3, #14]
 80005d4:	3b01      	subs	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	739a      	strb	r2, [r3, #14]

		return true;
 80005dc:	2301      	movs	r3, #1
 80005de:	e000      	b.n	80005e2 <queue_next+0x60>
	} else {
		return false;
 80005e0:	2300      	movs	r3, #0
	}
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}

080005ea <queue_empty>:

bool queue_full(message_queue_t *queue) {
	return queue->count ==  queue->queue_length;
}

bool queue_empty(message_queue_t *queue) {
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return queue->count == 0;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7b9b      	ldrb	r3, [r3, #14]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	bf0c      	ite	eq
 80005fa:	2301      	moveq	r3, #1
 80005fc:	2300      	movne	r3, #0
 80005fe:	b2db      	uxtb	r3, r3
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
	...

0800060c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_CAN1_Init+0x64>)
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_CAN1_Init+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_CAN1_Init+0x64>)
 8000618:	2202      	movs	r2, #2
 800061a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_CAN1_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_CAN1_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_CAN1_Init+0x64>)
 800062a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800062e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_CAN1_Init+0x64>)
 8000632:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000636:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_CAN1_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_CAN1_Init+0x64>)
 800065e:	f000 fcbd 	bl	8000fdc <HAL_CAN_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 fa98 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000ec 	.word	0x200000ec
 8000674:	40006400 	.word	0x40006400

08000678 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_CAN2_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_CAN2_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_CAN2_Init+0x64>)
 8000684:	2202      	movs	r2, #2
 8000686:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_CAN2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_CAN2_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_CAN2_Init+0x64>)
 8000696:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800069a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_CAN2_Init+0x64>)
 800069e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_CAN2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_CAN2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_CAN2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_CAN2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_CAN2_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_CAN2_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_CAN2_Init+0x64>)
 80006ca:	f000 fc87 	bl	8000fdc <HAL_CAN_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 fa62 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000c4 	.word	0x200000c4
 80006e0:	40006800 	.word	0x40006800

080006e4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a52      	ldr	r2, [pc, #328]	; (800084c <HAL_CAN_MspInit+0x168>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d146      	bne.n	8000794 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <HAL_CAN_MspInit+0x16c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a50      	ldr	r2, [pc, #320]	; (8000850 <HAL_CAN_MspInit+0x16c>)
 800070e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000710:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <HAL_CAN_MspInit+0x16c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10d      	bne.n	8000734 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	61bb      	str	r3, [r7, #24]
 800071c:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <HAL_CAN_MspInit+0x170>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a4c      	ldr	r2, [pc, #304]	; (8000854 <HAL_CAN_MspInit+0x170>)
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <HAL_CAN_MspInit+0x170>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000730:	61bb      	str	r3, [r7, #24]
 8000732:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	4b46      	ldr	r3, [pc, #280]	; (8000854 <HAL_CAN_MspInit+0x170>)
 800073a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073c:	4a45      	ldr	r2, [pc, #276]	; (8000854 <HAL_CAN_MspInit+0x170>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	6313      	str	r3, [r2, #48]	; 0x30
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <HAL_CAN_MspInit+0x170>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN1_GLV_RX_Pin|CAN1_GLV_TX_Pin;
 8000750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000762:	2309      	movs	r3, #9
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	483a      	ldr	r0, [pc, #232]	; (8000858 <HAL_CAN_MspInit+0x174>)
 800076e:	f001 fbfb 	bl	8001f68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2014      	movs	r0, #20
 8000778:	f001 fbbf 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800077c:	2014      	movs	r0, #20
 800077e:	f001 fbd8 	bl	8001f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2015      	movs	r0, #21
 8000788:	f001 fbb7 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800078c:	2015      	movs	r0, #21
 800078e:	f001 fbd0 	bl	8001f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000792:	e057      	b.n	8000844 <HAL_CAN_MspInit+0x160>
  else if(canHandle->Instance==CAN2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a30      	ldr	r2, [pc, #192]	; (800085c <HAL_CAN_MspInit+0x178>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d152      	bne.n	8000844 <HAL_CAN_MspInit+0x160>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007ac:	6413      	str	r3, [r2, #64]	; 0x40
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <HAL_CAN_MspInit+0x16c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	3301      	adds	r3, #1
 80007c0:	4a23      	ldr	r2, [pc, #140]	; (8000850 <HAL_CAN_MspInit+0x16c>)
 80007c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <HAL_CAN_MspInit+0x16c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10d      	bne.n	80007e8 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a1f      	ldr	r2, [pc, #124]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a18      	ldr	r2, [pc, #96]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_CAN_MspInit+0x170>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CAN2_HV_RX_Pin|CAN2_HV_TX_Pin;
 8000804:	2360      	movs	r3, #96	; 0x60
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000814:	2309      	movs	r3, #9
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <HAL_CAN_MspInit+0x174>)
 8000820:	f001 fba2 	bl	8001f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2040      	movs	r0, #64	; 0x40
 800082a:	f001 fb66 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800082e:	2040      	movs	r0, #64	; 0x40
 8000830:	f001 fb7f 	bl	8001f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2041      	movs	r0, #65	; 0x41
 800083a:	f001 fb5e 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800083e:	2041      	movs	r0, #65	; 0x41
 8000840:	f001 fb77 	bl	8001f32 <HAL_NVIC_EnableIRQ>
}
 8000844:	bf00      	nop
 8000846:	3730      	adds	r7, #48	; 0x30
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40006400 	.word	0x40006400
 8000850:	2000008c 	.word	0x2000008c
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400
 800085c:	40006800 	.word	0x40006800

08000860 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_GPIO_Init+0x2c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <MX_GPIO_Init+0x2c>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <MX_GPIO_Init+0x2c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40023800 	.word	0x40023800

08000890 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a0      	sub	sp, #128	; 0x80
 8000894:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000896:	f000 fb33 	bl	8000f00 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800089a:	f000 f8d9 	bl	8000a50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800089e:	f7ff ffdf 	bl	8000860 <MX_GPIO_Init>
	MX_CAN1_Init();
 80008a2:	f7ff feb3 	bl	800060c <MX_CAN1_Init>
	MX_CAN2_Init();
 80008a6:	f7ff fee7 	bl	8000678 <MX_CAN2_Init>
	MX_USART3_UART_Init();
 80008aa:	f000 fa8d 	bl	8000dc8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	queue_init(&c1Passthrough, sizeof(CAN_Generic_t), 25);
 80008ae:	2219      	movs	r2, #25
 80008b0:	2128      	movs	r1, #40	; 0x28
 80008b2:	4861      	ldr	r0, [pc, #388]	; (8000a38 <main+0x1a8>)
 80008b4:	f7ff fe02 	bl	80004bc <queue_init>
	queue_init(&c2Passthrough, sizeof(CAN_Generic_t), 25);
 80008b8:	2219      	movs	r2, #25
 80008ba:	2128      	movs	r1, #40	; 0x28
 80008bc:	485f      	ldr	r0, [pc, #380]	; (8000a3c <main+0x1ac>)
 80008be:	f7ff fdfd 	bl	80004bc <queue_init>

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80008c2:	485f      	ldr	r0, [pc, #380]	; (8000a40 <main+0x1b0>)
 80008c4:	f000 fd66 	bl	8001394 <HAL_CAN_Start>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <main+0x42>
	{
		Error_Handler();
 80008ce:	f000 f965 	bl	8000b9c <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan2) != HAL_OK)
 80008d2:	485c      	ldr	r0, [pc, #368]	; (8000a44 <main+0x1b4>)
 80008d4:	f000 fd5e 	bl	8001394 <HAL_CAN_Start>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0x52>
	{
		Error_Handler();
 80008de:	f000 f95d 	bl	8000b9c <Error_Handler>
	}

	CAN_FilterTypeDef sFilterConfig;

	sFilterConfig.FilterBank = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	66fb      	str	r3, [r7, #108]	; 0x6c
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	673b      	str	r3, [r7, #112]	; 0x70
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008ea:	2301      	movs	r3, #1
 80008ec:	677b      	str	r3, [r7, #116]	; 0x74
	sFilterConfig.FilterIdHigh = 0x0000;
 80008ee:	2300      	movs	r3, #0
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
	sFilterConfig.FilterIdLow = 0x0001;
 80008f2:	2301      	movs	r3, #1
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80008f6:	2300      	movs	r3, #0
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80008fa:	2300      	movs	r3, #0
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008fe:	2300      	movs	r3, #0
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
	sFilterConfig.FilterActivation = ENABLE;
 8000902:	2301      	movs	r3, #1
 8000904:	67bb      	str	r3, [r7, #120]	; 0x78
	sFilterConfig.SlaveStartFilterBank = 14;
 8000906:	230e      	movs	r3, #14
 8000908:	67fb      	str	r3, [r7, #124]	; 0x7c

	if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800090a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800090e:	4619      	mov	r1, r3
 8000910:	484b      	ldr	r0, [pc, #300]	; (8000a40 <main+0x1b0>)
 8000912:	f000 fc5f 	bl	80011d4 <HAL_CAN_ConfigFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <main+0x90>
	{
		Error_Handler();
 800091c:	f000 f93e 	bl	8000b9c <Error_Handler>
	}

	if(HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK)
 8000920:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000924:	4619      	mov	r1, r3
 8000926:	4847      	ldr	r0, [pc, #284]	; (8000a44 <main+0x1b4>)
 8000928:	f000 fc54 	bl	80011d4 <HAL_CAN_ConfigFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <main+0xa6>
	{
		Error_Handler();
 8000932:	f000 f933 	bl	8000b9c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000936:	2102      	movs	r1, #2
 8000938:	4841      	ldr	r0, [pc, #260]	; (8000a40 <main+0x1b0>)
 800093a:	f000 ffb5 	bl	80018a8 <HAL_CAN_ActivateNotification>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <main+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000944:	f000 f92a 	bl	8000b9c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)
 8000948:	2110      	movs	r1, #16
 800094a:	483d      	ldr	r0, [pc, #244]	; (8000a40 <main+0x1b0>)
 800094c:	f000 ffac 	bl	80018a8 <HAL_CAN_ActivateNotification>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <main+0xca>
			!= HAL_OK) {
		Error_Handler();
 8000956:	f000 f921 	bl	8000b9c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)
 800095a:	2102      	movs	r1, #2
 800095c:	4839      	ldr	r0, [pc, #228]	; (8000a44 <main+0x1b4>)
 800095e:	f000 ffa3 	bl	80018a8 <HAL_CAN_ActivateNotification>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <main+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000968:	f000 f918 	bl	8000b9c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)
 800096c:	2110      	movs	r1, #16
 800096e:	4835      	ldr	r0, [pc, #212]	; (8000a44 <main+0x1b4>)
 8000970:	f000 ff9a 	bl	80018a8 <HAL_CAN_ActivateNotification>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d026      	beq.n	80009c8 <main+0x138>
			!= HAL_OK) {
		Error_Handler();
 800097a:	f000 f90f 	bl	8000b9c <Error_Handler>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		while(!queue_empty(&c1Passthrough))
 800097e:	e023      	b.n	80009c8 <main+0x138>
		{
			while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) <= 0);
 8000980:	bf00      	nop
 8000982:	482f      	ldr	r0, [pc, #188]	; (8000a40 <main+0x1b0>)
 8000984:	f000 fe24 	bl	80015d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f9      	beq.n	8000982 <main+0xf2>
			CAN_Generic_t msg;
			queue_next(&c1Passthrough, &msg);
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <main+0x1a8>)
 8000994:	f7ff fdf5 	bl	8000582 <queue_next>
			CAN_TxHeaderTypeDef header = {
 8000998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
 80009a8:	615a      	str	r2, [r3, #20]
					.DLC = msg.header.DLC,
					.ExtId = msg.header.ExtId,
 80009aa:	687b      	ldr	r3, [r7, #4]
			CAN_TxHeaderTypeDef header = {
 80009ac:	647b      	str	r3, [r7, #68]	; 0x44
					.IDE = msg.header.IDE,
 80009ae:	68bb      	ldr	r3, [r7, #8]
			CAN_TxHeaderTypeDef header = {
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
					.DLC = msg.header.DLC,
 80009b2:	693b      	ldr	r3, [r7, #16]
			CAN_TxHeaderTypeDef header = {
 80009b4:	653b      	str	r3, [r7, #80]	; 0x50
			};
			HAL_CAN_AddTxMessage(&hcan1, &header, msg.data, &can1Mb);
 80009b6:	463b      	mov	r3, r7
 80009b8:	f103 021c 	add.w	r2, r3, #28
 80009bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <main+0x1b8>)
 80009c2:	481f      	ldr	r0, [pc, #124]	; (8000a40 <main+0x1b0>)
 80009c4:	f000 fd2a 	bl	800141c <HAL_CAN_AddTxMessage>
		while(!queue_empty(&c1Passthrough))
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <main+0x1a8>)
 80009ca:	f7ff fe0e 	bl	80005ea <queue_empty>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1d2      	bne.n	8000980 <main+0xf0>
		}

		while(!queue_empty(&c2Passthrough))
 80009da:	e023      	b.n	8000a24 <main+0x194>
		{
			while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan2) <= 0);
 80009dc:	bf00      	nop
 80009de:	4819      	ldr	r0, [pc, #100]	; (8000a44 <main+0x1b4>)
 80009e0:	f000 fdf6 	bl	80015d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f9      	beq.n	80009de <main+0x14e>
			CAN_Generic_t msg;
			queue_next(&c2Passthrough, &msg);
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	4813      	ldr	r0, [pc, #76]	; (8000a3c <main+0x1ac>)
 80009f0:	f7ff fdc7 	bl	8000582 <queue_next>
			CAN_TxHeaderTypeDef header = {
 80009f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
					.DLC = msg.header.DLC,
					.ExtId = msg.header.ExtId,
 8000a06:	687b      	ldr	r3, [r7, #4]
			CAN_TxHeaderTypeDef header = {
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
					.IDE = msg.header.IDE,
 8000a0a:	68bb      	ldr	r3, [r7, #8]
			CAN_TxHeaderTypeDef header = {
 8000a0c:	633b      	str	r3, [r7, #48]	; 0x30
					.DLC = msg.header.DLC,
 8000a0e:	693b      	ldr	r3, [r7, #16]
			CAN_TxHeaderTypeDef header = {
 8000a10:	63bb      	str	r3, [r7, #56]	; 0x38
			};
			HAL_CAN_AddTxMessage(&hcan2, &header, msg.data, &can2Mb);
 8000a12:	463b      	mov	r3, r7
 8000a14:	f103 021c 	add.w	r2, r3, #28
 8000a18:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <main+0x1bc>)
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <main+0x1b4>)
 8000a20:	f000 fcfc 	bl	800141c <HAL_CAN_AddTxMessage>
		while(!queue_empty(&c2Passthrough))
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <main+0x1ac>)
 8000a26:	f7ff fde0 	bl	80005ea <queue_empty>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f083 0301 	eor.w	r3, r3, #1
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1d2      	bne.n	80009dc <main+0x14c>
		while(!queue_empty(&c1Passthrough))
 8000a36:	e7c7      	b.n	80009c8 <main+0x138>
 8000a38:	200000b0 	.word	0x200000b0
 8000a3c:	2000009c 	.word	0x2000009c
 8000a40:	200000ec 	.word	0x200000ec
 8000a44:	200000c4 	.word	0x200000c4
 8000a48:	200000c0 	.word	0x200000c0
 8000a4c:	200000ac 	.word	0x200000ac

08000a50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b092      	sub	sp, #72	; 0x48
 8000a54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fab4 	bl	8002fcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a76:	2301      	movs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fc0c 	bl	80022a4 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000a92:	f000 f883 	bl	8000b9c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 fe48 	bl	8002744 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000aba:	f000 f86f 	bl	8000b9c <Error_Handler>
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3748      	adds	r7, #72	; 0x48
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <_write>:

/* USER CODE BEGIN 4 */
#ifdef PRINTF_TO_UART
/** Override _write to log to UART */
int _write(int file, char *data, int len) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	if ((file != STDOUT_FILENO) && (file != STDERR_FILENO)) {
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d005      	beq.n	8000ae6 <_write+0x1e>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d002      	beq.n	8000ae6 <_write+0x1e>
		return -1;
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae4:	e00f      	b.n	8000b06 <_write+0x3e>
	}
	HAL_StatusTypeDef s = HAL_UART_Transmit(&huart3, (uint8_t*) data, len,
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	4807      	ldr	r0, [pc, #28]	; (8000b10 <_write+0x48>)
 8000af2:	f002 f864 	bl	8002bbe <HAL_UART_Transmit>
 8000af6:	4603      	mov	r3, r0
 8000af8:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);

	return (s == HAL_OK ? len : 0);
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <_write+0x3c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	e000      	b.n	8000b06 <_write+0x3e>
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000114 	.word	0x20000114

08000b14 <handleCAN>:
#endif

void handleCAN(CAN_HandleTypeDef *hcan, int fifo) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1e:	b672      	cpsid	i
}
 8000b20:	bf00      	nop
	__disable_irq();

	// Iterate over the CAN FIFO buffer, adding all CAN messages to the CAN Queue.
	CAN_Generic_t msg;

	while (HAL_CAN_GetRxFifoFillLevel(hcan, fifo) > 0) {
 8000b22:	e023      	b.n	8000b6c <handleCAN+0x58>
		if (HAL_CAN_GetRxMessage(hcan, fifo, &(msg.header), msg.data)
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	331c      	adds	r3, #28
 8000b2c:	f107 0208 	add.w	r2, r7, #8
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 fd81 	bl	8001638 <HAL_CAN_GetRxMessage>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <handleCAN+0x2e>
				!= HAL_OK) {
			printf("Failed to recieve good can message\r\n");
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <handleCAN+0x74>)
 8000b3e:	f002 fb6f 	bl	8003220 <puts>
		}

		if(hcan == &hcan1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a11      	ldr	r2, [pc, #68]	; (8000b8c <handleCAN+0x78>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d106      	bne.n	8000b58 <handleCAN+0x44>
		{
			queue_add(&c2Passthrough, &msg);
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <handleCAN+0x7c>)
 8000b52:	f7ff fcdf 	bl	8000514 <queue_add>
 8000b56:	e009      	b.n	8000b6c <handleCAN+0x58>
		} else if(hcan == &hcan2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <handleCAN+0x80>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d105      	bne.n	8000b6c <handleCAN+0x58>
		{
			queue_add(&c1Passthrough, &msg);
 8000b60:	f107 0308 	add.w	r3, r7, #8
 8000b64:	4619      	mov	r1, r3
 8000b66:	480c      	ldr	r0, [pc, #48]	; (8000b98 <handleCAN+0x84>)
 8000b68:	f7ff fcd4 	bl	8000514 <queue_add>
	while (HAL_CAN_GetRxFifoFillLevel(hcan, fifo) > 0) {
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 fe72 	bl	800185a <HAL_CAN_GetRxFifoFillLevel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1d3      	bne.n	8000b24 <handleCAN+0x10>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b7c:	b662      	cpsie	i
}
 8000b7e:	bf00      	nop
		}
	}
	__enable_irq();
}
 8000b80:	bf00      	nop
 8000b82:	3730      	adds	r7, #48	; 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08003994 	.word	0x08003994
 8000b8c:	200000ec 	.word	0x200000ec
 8000b90:	2000009c 	.word	0x2000009c
 8000b94:	200000c4 	.word	0x200000c4
 8000b98:	200000b0 	.word	0x200000b0

08000b9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x48>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_MspInit+0x48>)
 8000bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x48>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x48>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_MspInit+0x48>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_MspInit+0x48>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000c3a:	f000 f9b3 	bl	8000fa4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles CAN1 RX0 interrupts.
 */
void CAN1_RX0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */
	handleCAN(&hcan1, CAN_RX_FIFO0);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <CAN1_RX0_IRQHandler+0x18>)
 8000c4c:	f7ff ff62 	bl	8000b14 <handleCAN>
	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <CAN1_RX0_IRQHandler+0x18>)
 8000c52:	f000 fe4e 	bl	80018f2 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000ec 	.word	0x200000ec

08000c60 <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */
	handleCAN(&hcan1, CAN_RX_FIFO1);
 8000c64:	2101      	movs	r1, #1
 8000c66:	4804      	ldr	r0, [pc, #16]	; (8000c78 <CAN1_RX1_IRQHandler+0x18>)
 8000c68:	f7ff ff54 	bl	8000b14 <handleCAN>
	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <CAN1_RX1_IRQHandler+0x18>)
 8000c6e:	f000 fe40 	bl	80018f2 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX1_IRQn 1 */

	/* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000ec 	.word	0x200000ec

08000c7c <CAN2_RX0_IRQHandler>:

/**
 * @brief This function handles CAN2 RX0 interrupts.
 */
void CAN2_RX0_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_RX0_IRQn 0 */
	handleCAN(&hcan2, CAN_RX_FIFO0);
 8000c80:	2100      	movs	r1, #0
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <CAN2_RX0_IRQHandler+0x18>)
 8000c84:	f7ff ff46 	bl	8000b14 <handleCAN>
	/* USER CODE END CAN2_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <CAN2_RX0_IRQHandler+0x18>)
 8000c8a:	f000 fe32 	bl	80018f2 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_RX0_IRQn 1 */

	/* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200000c4 	.word	0x200000c4

08000c98 <CAN2_RX1_IRQHandler>:

/**
 * @brief This function handles CAN2 RX1 interrupt.
 */
void CAN2_RX1_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_RX1_IRQn 0 */
	handleCAN(&hcan2, CAN_RX_FIFO1);
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <CAN2_RX1_IRQHandler+0x18>)
 8000ca0:	f7ff ff38 	bl	8000b14 <handleCAN>
	/* USER CODE END CAN2_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <CAN2_RX1_IRQHandler+0x18>)
 8000ca6:	f000 fe24 	bl	80018f2 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_RX1_IRQn 1 */

	/* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000c4 	.word	0x200000c4

08000cb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00a      	b.n	8000cdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4601      	mov	r1, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf0      	blt.n	8000cc6 <_read+0x12>
	}

return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d14:	605a      	str	r2, [r3, #4]
	return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <_isatty>:

int _isatty(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
	return 1;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr

08000d36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b085      	sub	sp, #20
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	60f8      	str	r0, [r7, #12]
 8000d3e:	60b9      	str	r1, [r7, #8]
 8000d40:	607a      	str	r2, [r7, #4]
	return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
	...

08000d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <_sbrk+0x5c>)
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <_sbrk+0x60>)
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <_sbrk+0x64>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <_sbrk+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d207      	bcs.n	8000d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d80:	f002 f8ec 	bl	8002f5c <__errno>
 8000d84:	4603      	mov	r3, r0
 8000d86:	220c      	movs	r2, #12
 8000d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	e009      	b.n	8000da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <_sbrk+0x64>)
 8000da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da2:	68fb      	ldr	r3, [r7, #12]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20020000 	.word	0x20020000
 8000db0:	00000400 	.word	0x00000400
 8000db4:	20000090 	.word	0x20000090
 8000db8:	20000168 	.word	0x20000168

08000dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_USART3_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART3_UART_Init+0x4c>)
 8000e00:	f001 fe90 	bl	8002b24 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f7ff fec7 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000114 	.word	0x20000114
 8000e18:	40004800 	.word	0x40004800

08000e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_UART_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12c      	bne.n	8000e98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_UART_MspInit+0x88>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_UART_MspInit+0x8c>)
 8000e94:	f001 f868 	bl	8001f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <Reset_Handler>:
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x14>
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	e003      	b.n	8000ebc <LoopCopyDataInit>

08000eb4 <CopyDataInit>:
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x18>)
 8000eb6:	585b      	ldr	r3, [r3, r1]
 8000eb8:	5043      	str	r3, [r0, r1]
 8000eba:	3104      	adds	r1, #4

08000ebc <LoopCopyDataInit>:
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <LoopFillZerobss+0x1c>)
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x20>)
 8000ec0:	1842      	adds	r2, r0, r1
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3f6      	bcc.n	8000eb4 <CopyDataInit>
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x24>)
 8000ec8:	e002      	b.n	8000ed0 <LoopFillZerobss>

08000eca <FillZerobss>:
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f842 3b04 	str.w	r3, [r2], #4

08000ed0 <LoopFillZerobss>:
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <LoopFillZerobss+0x28>)
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3f9      	bcc.n	8000eca <FillZerobss>
 8000ed6:	f7ff ff71 	bl	8000dbc <SystemInit>
 8000eda:	f002 f845 	bl	8002f68 <__libc_init_array>
 8000ede:	f7ff fcd7 	bl	8000890 <main>
 8000ee2:	4770      	bx	lr
 8000ee4:	20020000 	.word	0x20020000
 8000ee8:	08003a44 	.word	0x08003a44
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000070 	.word	0x20000070
 8000ef4:	20000070 	.word	0x20000070
 8000ef8:	20000168 	.word	0x20000168

08000efc <ADC_IRQHandler>:
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 ffdb 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fe38 	bl	8000ba8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fff3 	bl	8001f4e <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f80:	f000 ffbb 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x1c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x20>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_IncTick+0x20>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000154 	.word	0x20000154

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <HAL_GetTick+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000154 	.word	0x20000154

08000fdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0ed      	b.n	80011ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fb72 	bl	80006e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0202 	bic.w	r2, r2, #2
 800100e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001010:	f7ff ffda 	bl	8000fc8 <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001016:	e012      	b.n	800103e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001018:	f7ff ffd6 	bl	8000fc8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d90b      	bls.n	800103e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2205      	movs	r2, #5
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e0c5      	b.n	80011ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e5      	bne.n	8001018 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800105c:	f7ff ffb4 	bl	8000fc8 <HAL_GetTick>
 8001060:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001062:	e012      	b.n	800108a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001064:	f7ff ffb0 	bl	8000fc8 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d90b      	bls.n	800108a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2205      	movs	r2, #5
 8001082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e09f      	b.n	80011ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0e5      	beq.n	8001064 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7e1b      	ldrb	r3, [r3, #24]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e007      	b.n	80010c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7e5b      	ldrb	r3, [r3, #25]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e007      	b.n	80010ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	7e9b      	ldrb	r3, [r3, #26]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0220 	orr.w	r2, r2, #32
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	e007      	b.n	8001116 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0220 	bic.w	r2, r2, #32
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7edb      	ldrb	r3, [r3, #27]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d108      	bne.n	8001130 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0210 	bic.w	r2, r2, #16
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e007      	b.n	8001140 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f042 0210 	orr.w	r2, r2, #16
 800113e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7f1b      	ldrb	r3, [r3, #28]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d108      	bne.n	800115a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0208 	orr.w	r2, r2, #8
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e007      	b.n	800116a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0208 	bic.w	r2, r2, #8
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7f5b      	ldrb	r3, [r3, #29]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d108      	bne.n	8001184 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0204 	orr.w	r2, r2, #4
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0204 	bic.w	r2, r2, #4
 8001192:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	431a      	orrs	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	ea42 0103 	orr.w	r1, r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	1e5a      	subs	r2, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011ec:	7cfb      	ldrb	r3, [r7, #19]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d003      	beq.n	80011fa <HAL_CAN_ConfigFilter+0x26>
 80011f2:	7cfb      	ldrb	r3, [r7, #19]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	f040 80be 	bne.w	8001376 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80011fa:	4b65      	ldr	r3, [pc, #404]	; (8001390 <HAL_CAN_ConfigFilter+0x1bc>)
 80011fc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001214:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	431a      	orrs	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2201      	movs	r2, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	43db      	mvns	r3, r3
 800124c:	401a      	ands	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d123      	bne.n	80012a4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800127e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3248      	adds	r2, #72	; 0x48
 8001284:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001298:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	3348      	adds	r3, #72	; 0x48
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	440b      	add	r3, r1
 80012a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d122      	bne.n	80012f2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3248      	adds	r2, #72	; 0x48
 80012d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	3348      	adds	r3, #72	; 0x48
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	401a      	ands	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800130c:	e007      	b.n	800131e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	401a      	ands	r2, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001338:	e007      	b.n	800134a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	431a      	orrs	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d107      	bne.n	8001362 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	431a      	orrs	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001368:	f023 0201 	bic.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001372:	2300      	movs	r3, #0
 8001374:	e006      	b.n	8001384 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
  }
}
 8001384:	4618      	mov	r0, r3
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40006400 	.word	0x40006400

08001394 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d12e      	bne.n	8001406 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2202      	movs	r2, #2
 80013ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013c0:	f7ff fe02 	bl	8000fc8 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013c6:	e012      	b.n	80013ee <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c8:	f7ff fdfe 	bl	8000fc8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b0a      	cmp	r3, #10
 80013d4:	d90b      	bls.n	80013ee <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2205      	movs	r2, #5
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e012      	b.n	8001414 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1e5      	bne.n	80013c8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e006      	b.n	8001414 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
  }
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d003      	beq.n	8001448 <HAL_CAN_AddTxMessage+0x2c>
 8001440:	7ffb      	ldrb	r3, [r7, #31]
 8001442:	2b02      	cmp	r3, #2
 8001444:	f040 80b8 	bne.w	80015b8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10a      	bne.n	8001468 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001458:	2b00      	cmp	r3, #0
 800145a:	d105      	bne.n	8001468 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80a0 	beq.w	80015a8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	0e1b      	lsrs	r3, r3, #24
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d907      	bls.n	8001488 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e09e      	b.n	80015c6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001488:	2201      	movs	r2, #1
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	409a      	lsls	r2, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10d      	bne.n	80014b6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014a4:	68f9      	ldr	r1, [r7, #12]
 80014a6:	6809      	ldr	r1, [r1, #0]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3318      	adds	r3, #24
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	440b      	add	r3, r1
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e00f      	b.n	80014d6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80014ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3318      	adds	r3, #24
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	440b      	add	r3, r1
 80014d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3318      	adds	r3, #24
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	440b      	add	r3, r1
 80014e6:	3304      	adds	r3, #4
 80014e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	7d1b      	ldrb	r3, [r3, #20]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d111      	bne.n	8001516 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3318      	adds	r3, #24
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4413      	add	r3, r2
 80014fe:	3304      	adds	r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	6811      	ldr	r1, [r2, #0]
 8001506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3318      	adds	r3, #24
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	440b      	add	r3, r1
 8001512:	3304      	adds	r3, #4
 8001514:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3307      	adds	r3, #7
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	061a      	lsls	r2, r3, #24
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3306      	adds	r3, #6
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3305      	adds	r3, #5
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	4313      	orrs	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	3204      	adds	r2, #4
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	4610      	mov	r0, r2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	6811      	ldr	r1, [r2, #0]
 800153e:	ea43 0200 	orr.w	r2, r3, r0
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800154c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3303      	adds	r3, #3
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	061a      	lsls	r2, r3, #24
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3302      	adds	r3, #2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	041b      	lsls	r3, r3, #16
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	4313      	orrs	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	4610      	mov	r0, r2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	6811      	ldr	r1, [r2, #0]
 8001574:	ea43 0200 	orr.w	r2, r3, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	440b      	add	r3, r1
 800157e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001582:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3318      	adds	r3, #24
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	6811      	ldr	r1, [r2, #0]
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3318      	adds	r3, #24
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e00e      	b.n	80015c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e006      	b.n	80015c6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d002      	beq.n	80015f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d11d      	bne.n	800162c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3301      	adds	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800162c:	68fb      	ldr	r3, [r7, #12]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d003      	beq.n	800165c <HAL_CAN_GetRxMessage+0x24>
 8001654:	7dfb      	ldrb	r3, [r7, #23]
 8001656:	2b02      	cmp	r3, #2
 8001658:	f040 80f3 	bne.w	8001842 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10e      	bne.n	8001680 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d116      	bne.n	800169e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0e7      	b.n	8001850 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0d8      	b.n	8001850 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	331b      	adds	r3, #27
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	4413      	add	r3, r2
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0204 	and.w	r2, r3, #4
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	331b      	adds	r3, #27
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	4413      	add	r3, r2
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	0d5b      	lsrs	r3, r3, #21
 80016cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e00b      	b.n	80016ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	331b      	adds	r3, #27
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	4413      	add	r3, r2
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	08db      	lsrs	r3, r3, #3
 80016e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	331b      	adds	r3, #27
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0202 	and.w	r2, r3, #2
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	331b      	adds	r3, #27
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	3304      	adds	r3, #4
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	331b      	adds	r3, #27
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	4413      	add	r3, r2
 8001728:	3304      	adds	r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	331b      	adds	r3, #27
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	3304      	adds	r3, #4
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	b29a      	uxth	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4413      	add	r3, r2
 8001756:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b2da      	uxtb	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	4413      	add	r3, r2
 800176c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	0a1a      	lsrs	r2, r3, #8
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0c1a      	lsrs	r2, r3, #16
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3302      	adds	r3, #2
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0e1a      	lsrs	r2, r3, #24
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3303      	adds	r3, #3
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3304      	adds	r3, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0a1a      	lsrs	r2, r3, #8
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3305      	adds	r3, #5
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0c1a      	lsrs	r2, r3, #16
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3306      	adds	r3, #6
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0e1a      	lsrs	r2, r3, #24
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3307      	adds	r3, #7
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d108      	bne.n	800182e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0220 	orr.w	r2, r2, #32
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	e007      	b.n	800183e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e006      	b.n	8001850 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
  }
}
 8001850:	4618      	mov	r0, r3
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d002      	beq.n	800187c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001876:	7afb      	ldrb	r3, [r7, #11]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d10f      	bne.n	800189c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e005      	b.n	800189c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800189c:	68fb      	ldr	r3, [r7, #12]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d002      	beq.n	80018c6 <HAL_CAN_ActivateNotification+0x1e>
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d109      	bne.n	80018da <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6959      	ldr	r1, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e006      	b.n	80018e8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b08a      	sub	sp, #40	; 0x28
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d07c      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d023      	beq.n	800198a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f983 	bl	8001c60 <HAL_CAN_TxMailbox0CompleteCallback>
 800195a:	e016      	b.n	800198a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	e00c      	b.n	800198a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e002      	b.n	800198a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f986 	bl	8001c96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d024      	beq.n	80019de <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f962 	bl	8001c72 <HAL_CAN_TxMailbox1CompleteCallback>
 80019ae:	e016      	b.n	80019de <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	e00c      	b.n	80019de <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	e002      	b.n	80019de <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f965 	bl	8001ca8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d024      	beq.n	8001a32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f941 	bl	8001c84 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a02:	e016      	b.n	8001a32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	e00c      	b.n	8001a32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	e002      	b.n	8001a32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f944 	bl	8001cba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2210      	movs	r2, #16
 8001a54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d006      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f933 	bl	8001cde <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f91b 	bl	8001ccc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00c      	beq.n	8001aba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2210      	movs	r2, #16
 8001ab8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f913 	bl	8001d02 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8fb 	bl	8001cf0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00b      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2210      	movs	r2, #16
 8001b14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f8fc 	bl	8001d14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d006      	beq.n	8001b3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2208      	movs	r2, #8
 8001b36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f8f4 	bl	8001d26 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d07b      	beq.n	8001c40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d072      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d043      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03e      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bc0:	2b60      	cmp	r3, #96	; 0x60
 8001bc2:	d02b      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x32a>
 8001bc4:	2b60      	cmp	r3, #96	; 0x60
 8001bc6:	d82e      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001bc8:	2b50      	cmp	r3, #80	; 0x50
 8001bca:	d022      	beq.n	8001c12 <HAL_CAN_IRQHandler+0x320>
 8001bcc:	2b50      	cmp	r3, #80	; 0x50
 8001bce:	d82a      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d019      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x316>
 8001bd4:	2b40      	cmp	r3, #64	; 0x40
 8001bd6:	d826      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001bd8:	2b30      	cmp	r3, #48	; 0x30
 8001bda:	d010      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x30c>
 8001bdc:	2b30      	cmp	r3, #48	; 0x30
 8001bde:	d822      	bhi.n	8001c26 <HAL_CAN_IRQHandler+0x334>
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d002      	beq.n	8001bea <HAL_CAN_IRQHandler+0x2f8>
 8001be4:	2b20      	cmp	r3, #32
 8001be6:	d005      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001be8:	e01d      	b.n	8001c26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf2:	e019      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfc:	e014      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0320 	orr.w	r3, r3, #32
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c06:	e00f      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c10:	e00a      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c1a:	e005      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c24:	e000      	b.n	8001c28 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f870 	bl	8001d38 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bc80      	pop	{r7}
 8001d00:	4770      	bx	lr

08001d02 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
	...

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4906      	ldr	r1, [pc, #24]	; (8001de4 <__NVIC_EnableIRQ+0x34>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100

08001de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	6039      	str	r1, [r7, #0]
 8001df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	db0a      	blt.n	8001e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	490c      	ldr	r1, [pc, #48]	; (8001e34 <__NVIC_SetPriority+0x4c>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	0112      	lsls	r2, r2, #4
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e10:	e00a      	b.n	8001e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4908      	ldr	r1, [pc, #32]	; (8001e38 <__NVIC_SetPriority+0x50>)
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	f003 030f 	and.w	r3, r3, #15
 8001e1e:	3b04      	subs	r3, #4
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	761a      	strb	r2, [r3, #24]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f1c3 0307 	rsb	r3, r3, #7
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	bf28      	it	cs
 8001e5a:	2304      	movcs	r3, #4
 8001e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3304      	adds	r3, #4
 8001e62:	2b06      	cmp	r3, #6
 8001e64:	d902      	bls.n	8001e6c <NVIC_EncodePriority+0x30>
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3b03      	subs	r3, #3
 8001e6a:	e000      	b.n	8001e6e <NVIC_EncodePriority+0x32>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43da      	mvns	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	401a      	ands	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	4313      	orrs	r3, r2
         );
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec4:	f7ff ff90 	bl	8001de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff2d 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff42 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff90 	bl	8001e3c <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5f 	bl	8001de8 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff35 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f76:	e16f      	b.n	8002258 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	4013      	ands	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8161 	beq.w	8002252 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d00b      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d007      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa4:	2b11      	cmp	r3, #17
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b12      	cmp	r3, #18
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	f003 0201 	and.w	r2, r3, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0xea>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b12      	cmp	r3, #18
 8002050:	d123      	bne.n	800209a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	6939      	ldr	r1, [r7, #16]
 8002096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0203 	and.w	r2, r3, #3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80bb 	beq.w	8002252 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	4b64      	ldr	r3, [pc, #400]	; (8002274 <HAL_GPIO_Init+0x30c>)
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	4a63      	ldr	r2, [pc, #396]	; (8002274 <HAL_GPIO_Init+0x30c>)
 80020e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ea:	6453      	str	r3, [r2, #68]	; 0x44
 80020ec:	4b61      	ldr	r3, [pc, #388]	; (8002274 <HAL_GPIO_Init+0x30c>)
 80020ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020f8:	4a5f      	ldr	r2, [pc, #380]	; (8002278 <HAL_GPIO_Init+0x310>)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a57      	ldr	r2, [pc, #348]	; (800227c <HAL_GPIO_Init+0x314>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d031      	beq.n	8002188 <HAL_GPIO_Init+0x220>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a56      	ldr	r2, [pc, #344]	; (8002280 <HAL_GPIO_Init+0x318>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d02b      	beq.n	8002184 <HAL_GPIO_Init+0x21c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a55      	ldr	r2, [pc, #340]	; (8002284 <HAL_GPIO_Init+0x31c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d025      	beq.n	8002180 <HAL_GPIO_Init+0x218>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a54      	ldr	r2, [pc, #336]	; (8002288 <HAL_GPIO_Init+0x320>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d01f      	beq.n	800217c <HAL_GPIO_Init+0x214>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a53      	ldr	r2, [pc, #332]	; (800228c <HAL_GPIO_Init+0x324>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d019      	beq.n	8002178 <HAL_GPIO_Init+0x210>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_GPIO_Init+0x328>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <HAL_GPIO_Init+0x20c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a51      	ldr	r2, [pc, #324]	; (8002294 <HAL_GPIO_Init+0x32c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00d      	beq.n	8002170 <HAL_GPIO_Init+0x208>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_GPIO_Init+0x330>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <HAL_GPIO_Init+0x204>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a4f      	ldr	r2, [pc, #316]	; (800229c <HAL_GPIO_Init+0x334>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_GPIO_Init+0x200>
 8002164:	2308      	movs	r3, #8
 8002166:	e010      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002168:	2309      	movs	r3, #9
 800216a:	e00e      	b.n	800218a <HAL_GPIO_Init+0x222>
 800216c:	2307      	movs	r3, #7
 800216e:	e00c      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002170:	2306      	movs	r3, #6
 8002172:	e00a      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002174:	2305      	movs	r3, #5
 8002176:	e008      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002178:	2304      	movs	r3, #4
 800217a:	e006      	b.n	800218a <HAL_GPIO_Init+0x222>
 800217c:	2303      	movs	r3, #3
 800217e:	e004      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002180:	2302      	movs	r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_GPIO_Init+0x222>
 8002188:	2300      	movs	r3, #0
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	461a      	mov	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219c:	4936      	ldr	r1, [pc, #216]	; (8002278 <HAL_GPIO_Init+0x310>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_GPIO_Init+0x338>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021ce:	4a34      	ldr	r2, [pc, #208]	; (80022a0 <HAL_GPIO_Init+0x338>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_GPIO_Init+0x338>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021f8:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <HAL_GPIO_Init+0x338>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <HAL_GPIO_Init+0x338>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_GPIO_Init+0x338>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_GPIO_Init+0x338>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_GPIO_Init+0x338>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	f47f ae88 	bne.w	8001f78 <HAL_GPIO_Init+0x10>
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	371c      	adds	r7, #28
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40021000 	.word	0x40021000
 8002290:	40021400 	.word	0x40021400
 8002294:	40021800 	.word	0x40021800
 8002298:	40021c00 	.word	0x40021c00
 800229c:	40022000 	.word	0x40022000
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e237      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d050      	beq.n	8002364 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022c2:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d00c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4ba0      	ldr	r3, [pc, #640]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d112      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022da:	4b9d      	ldr	r3, [pc, #628]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e6:	d10b      	bne.n	8002300 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	4b99      	ldr	r3, [pc, #612]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d036      	beq.n	8002362 <HAL_RCC_OscConfig+0xbe>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d132      	bne.n	8002362 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e212      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4b93      	ldr	r3, [pc, #588]	; (8002554 <HAL_RCC_OscConfig+0x2b0>)
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d013      	beq.n	800233a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fe59 	bl	8000fc8 <HAL_GetTick>
 8002316:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231a:	f7fe fe55 	bl	8000fc8 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	; 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1fc      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x76>
 8002338:	e014      	b.n	8002364 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fe45 	bl	8000fc8 <HAL_GetTick>
 800233e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002342:	f7fe fe41 	bl	8000fc8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b64      	cmp	r3, #100	; 0x64
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e1e8      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002354:	4b7e      	ldr	r3, [pc, #504]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f0      	bne.n	8002342 <HAL_RCC_OscConfig+0x9e>
 8002360:	e000      	b.n	8002364 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002362:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d077      	beq.n	8002460 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002370:	4b77      	ldr	r3, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237c:	4b74      	ldr	r3, [pc, #464]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002384:	2b08      	cmp	r3, #8
 8002386:	d126      	bne.n	80023d6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002388:	4b71      	ldr	r3, [pc, #452]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d120      	bne.n	80023d6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002394:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e1bc      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	21f8      	movs	r1, #248	; 0xf8
 80023ba:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	fa91 f1a1 	rbit	r1, r1
 80023c2:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023c4:	6979      	ldr	r1, [r7, #20]
 80023c6:	fab1 f181 	clz	r1, r1
 80023ca:	b2c9      	uxtb	r1, r1
 80023cc:	408b      	lsls	r3, r1
 80023ce:	4960      	ldr	r1, [pc, #384]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d4:	e044      	b.n	8002460 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02a      	beq.n	8002434 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023de:	4b5e      	ldr	r3, [pc, #376]	; (8002558 <HAL_RCC_OscConfig+0x2b4>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fdf0 	bl	8000fc8 <HAL_GetTick>
 80023e8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ec:	f7fe fdec 	bl	8000fc8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e193      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b51      	ldr	r3, [pc, #324]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	21f8      	movs	r1, #248	; 0xf8
 8002418:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6939      	ldr	r1, [r7, #16]
 800241c:	fa91 f1a1 	rbit	r1, r1
 8002420:	60f9      	str	r1, [r7, #12]
  return result;
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	fab1 f181 	clz	r1, r1
 8002428:	b2c9      	uxtb	r1, r1
 800242a:	408b      	lsls	r3, r1
 800242c:	4948      	ldr	r1, [pc, #288]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
 8002432:	e015      	b.n	8002460 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HAL_RCC_OscConfig+0x2b4>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fdc5 	bl	8000fc8 <HAL_GetTick>
 800243e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fdc1 	bl	8000fc8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e168      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002454:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d030      	beq.n	80024ce <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d016      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	4b39      	ldr	r3, [pc, #228]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fda5 	bl	8000fc8 <HAL_GetTick>
 800247e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7fe fda1 	bl	8000fc8 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e148      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002494:	4b2e      	ldr	r3, [pc, #184]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x1de>
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b2e      	ldr	r3, [pc, #184]	; (800255c <HAL_RCC_OscConfig+0x2b8>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe fd8e 	bl	8000fc8 <HAL_GetTick>
 80024ac:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe fd8a 	bl	8000fc8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e131      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8088 	beq.w	80025ec <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d110      	bne.n	8002510 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_RCC_OscConfig+0x2bc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_RCC_OscConfig+0x2bc>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x2bc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d123      	bne.n	8002570 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_OscConfig+0x2bc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x2bc>)
 800252e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002532:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002534:	f7fe fd48 	bl	8000fc8 <HAL_GetTick>
 8002538:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	e013      	b.n	8002564 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fd44 	bl	8000fc8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d90c      	bls.n	8002564 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0eb      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40023802 	.word	0x40023802
 8002558:	42470000 	.word	0x42470000
 800255c:	42470e80 	.word	0x42470e80
 8002560:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002564:	4b72      	ldr	r3, [pc, #456]	; (8002730 <HAL_RCC_OscConfig+0x48c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0e5      	beq.n	800253c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_OscConfig+0x490>)
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d015      	beq.n	80025ae <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fd21 	bl	8000fc8 <HAL_GetTick>
 8002586:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fd1d 	bl	8000fc8 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0c2      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	4b65      	ldr	r3, [pc, #404]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RCC_OscConfig+0x2e6>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7fe fd0b 	bl	8000fc8 <HAL_GetTick>
 80025b2:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fd07 	bl	8000fc8 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0ac      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	4b5a      	ldr	r3, [pc, #360]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d105      	bne.n	80025ec <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e0:	4b55      	ldr	r3, [pc, #340]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8097 	beq.w	8002724 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025f6:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d061      	beq.n	80026c6 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d146      	bne.n	8002698 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260a:	4b4c      	ldr	r3, [pc, #304]	; (800273c <HAL_RCC_OscConfig+0x498>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fcda 	bl	8000fc8 <HAL_GetTick>
 8002614:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fcd6 	bl	8000fc8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e07d      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	4b43      	ldr	r3, [pc, #268]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002636:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x49c>)
 800263c:	4013      	ands	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	69d1      	ldr	r1, [r2, #28]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6a12      	ldr	r2, [r2, #32]
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264c:	0192      	lsls	r2, r2, #6
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002654:	0612      	lsls	r2, r2, #24
 8002656:	4311      	orrs	r1, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800265c:	0852      	lsrs	r2, r2, #1
 800265e:	3a01      	subs	r2, #1
 8002660:	0412      	lsls	r2, r2, #16
 8002662:	430a      	orrs	r2, r1
 8002664:	4934      	ldr	r1, [pc, #208]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 8002666:	4313      	orrs	r3, r2
 8002668:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_RCC_OscConfig+0x498>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe fcaa 	bl	8000fc8 <HAL_GetTick>
 8002674:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fca6 	bl	8000fc8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b64      	cmp	r3, #100	; 0x64
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e04d      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x3d4>
 8002696:	e045      	b.n	8002724 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002698:	4b28      	ldr	r3, [pc, #160]	; (800273c <HAL_RCC_OscConfig+0x498>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe fc93 	bl	8000fc8 <HAL_GetTick>
 80026a2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a6:	f7fe fc8f 	bl	8000fc8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b64      	cmp	r3, #100	; 0x64
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e036      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x402>
 80026c4:	e02e      	b.n	8002724 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e029      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80026d2:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_OscConfig+0x494>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d11c      	bne.n	8002720 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d115      	bne.n	8002720 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d10d      	bne.n	8002720 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40007000 	.word	0x40007000
 8002734:	40023870 	.word	0x40023870
 8002738:	40023800 	.word	0x40023800
 800273c:	42470060 	.word	0x42470060
 8002740:	f0bc8000 	.word	0xf0bc8000

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0d2      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002758:	4b6b      	ldr	r3, [pc, #428]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d90c      	bls.n	8002780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b68      	ldr	r3, [pc, #416]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0be      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d020      	beq.n	80027ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002798:	4b5c      	ldr	r3, [pc, #368]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a5b      	ldr	r2, [pc, #364]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 800279e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80027b0:	4b56      	ldr	r3, [pc, #344]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a55      	ldr	r2, [pc, #340]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4950      	ldr	r1, [pc, #320]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d040      	beq.n	800285c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e2:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d115      	bne.n	800281a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e085      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d107      	bne.n	800280a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fa:	4b44      	ldr	r3, [pc, #272]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e079      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e071      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281a:	4b3c      	ldr	r3, [pc, #240]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f023 0203 	bic.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4939      	ldr	r1, [pc, #228]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800282c:	f7fe fbcc 	bl	8000fc8 <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002832:	e00a      	b.n	800284a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002834:	f7fe fbc8 	bl	8000fc8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e059      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	4b30      	ldr	r3, [pc, #192]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 020c 	and.w	r2, r3, #12
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	429a      	cmp	r2, r3
 800285a:	d1eb      	bne.n	8002834 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800285c:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d20c      	bcs.n	8002884 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e03c      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	491b      	ldr	r1, [pc, #108]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4913      	ldr	r1, [pc, #76]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80028c2:	f000 f82b 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028c6:	4601      	mov	r1, r0
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_ClockConfig+0x1c8>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d0:	22f0      	movs	r2, #240	; 0xf0
 80028d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	60fa      	str	r2, [r7, #12]
  return result;
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	40d3      	lsrs	r3, r2
 80028e6:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x1cc>)
 80028e8:	5cd3      	ldrb	r3, [r2, r3]
 80028ea:	fa21 f303 	lsr.w	r3, r1, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1d0>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fb24 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00
 800290c:	40023800 	.word	0x40023800
 8002910:	080039b8 	.word	0x080039b8
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002922:	2100      	movs	r1, #0
 8002924:	6079      	str	r1, [r7, #4]
 8002926:	2100      	movs	r1, #0
 8002928:	60f9      	str	r1, [r7, #12]
 800292a:	2100      	movs	r1, #0
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800292e:	2100      	movs	r1, #0
 8002930:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002932:	4952      	ldr	r1, [pc, #328]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002934:	6889      	ldr	r1, [r1, #8]
 8002936:	f001 010c 	and.w	r1, r1, #12
 800293a:	2908      	cmp	r1, #8
 800293c:	d00d      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x3e>
 800293e:	2908      	cmp	r1, #8
 8002940:	f200 8094 	bhi.w	8002a6c <HAL_RCC_GetSysClockFreq+0x150>
 8002944:	2900      	cmp	r1, #0
 8002946:	d002      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0x32>
 8002948:	2904      	cmp	r1, #4
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x38>
 800294c:	e08e      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800294e:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x164>)
 8002950:	60bb      	str	r3, [r7, #8]
       break;
 8002952:	e08e      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x168>)
 8002956:	60bb      	str	r3, [r7, #8]
      break;
 8002958:	e08b      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800295a:	4948      	ldr	r1, [pc, #288]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x160>)
 800295c:	6849      	ldr	r1, [r1, #4]
 800295e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002962:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002964:	4945      	ldr	r1, [pc, #276]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002966:	6849      	ldr	r1, [r1, #4]
 8002968:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800296c:	2900      	cmp	r1, #0
 800296e:	d024      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4942      	ldr	r1, [pc, #264]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002972:	6849      	ldr	r1, [r1, #4]
 8002974:	0989      	lsrs	r1, r1, #6
 8002976:	4608      	mov	r0, r1
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002980:	f04f 0500 	mov.w	r5, #0
 8002984:	ea00 0204 	and.w	r2, r0, r4
 8002988:	ea01 0305 	and.w	r3, r1, r5
 800298c:	493d      	ldr	r1, [pc, #244]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x168>)
 800298e:	fb01 f003 	mul.w	r0, r1, r3
 8002992:	2100      	movs	r1, #0
 8002994:	fb01 f102 	mul.w	r1, r1, r2
 8002998:	1844      	adds	r4, r0, r1
 800299a:	493a      	ldr	r1, [pc, #232]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x168>)
 800299c:	fba2 0101 	umull	r0, r1, r2, r1
 80029a0:	1863      	adds	r3, r4, r1
 80029a2:	4619      	mov	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	f7fd fc0a 	bl	80001c4 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4613      	mov	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	e04a      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x160>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	099b      	lsrs	r3, r3, #6
 80029c0:	461a      	mov	r2, r3
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029ca:	f04f 0100 	mov.w	r1, #0
 80029ce:	ea02 0400 	and.w	r4, r2, r0
 80029d2:	ea03 0501 	and.w	r5, r3, r1
 80029d6:	4620      	mov	r0, r4
 80029d8:	4629      	mov	r1, r5
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	014b      	lsls	r3, r1, #5
 80029e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029e8:	0142      	lsls	r2, r0, #5
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	1b00      	subs	r0, r0, r4
 80029f0:	eb61 0105 	sbc.w	r1, r1, r5
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	018b      	lsls	r3, r1, #6
 80029fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a02:	0182      	lsls	r2, r0, #6
 8002a04:	1a12      	subs	r2, r2, r0
 8002a06:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0a:	f04f 0000 	mov.w	r0, #0
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	00d9      	lsls	r1, r3, #3
 8002a14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a18:	00d0      	lsls	r0, r2, #3
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	1912      	adds	r2, r2, r4
 8002a20:	eb45 0303 	adc.w	r3, r5, r3
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	f04f 0100 	mov.w	r1, #0
 8002a2c:	0299      	lsls	r1, r3, #10
 8002a2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a32:	0290      	lsls	r0, r2, #10
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	f7fd fbbe 	bl	80001c4 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	60bb      	str	r3, [r7, #8]
      break;
 8002a6a:	e002      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a6e:	60bb      	str	r3, [r7, #8]
      break;
 8002a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a72:	68bb      	ldr	r3, [r7, #8]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	017d7840 	.word	0x017d7840

08002a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002aa2:	f7ff fff1 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002ab0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002ab4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	fa92 f2a2 	rbit	r2, r2
 8002abc:	603a      	str	r2, [r7, #0]
  return result;
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	40d3      	lsrs	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	080039c8 	.word	0x080039c8

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002ae6:	f7ff ffcf 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aea:	4601      	mov	r1, r0
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002af4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002af8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	603a      	str	r2, [r7, #0]
  return result;
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	fab2 f282 	clz	r2, r2
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	40d3      	lsrs	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b0e:	5cd3      	ldrb	r3, [r2, r3]
 8002b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	080039c8 	.word	0x080039c8

08002b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e03f      	b.n	8002bb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f966 	bl	8000e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f905 	bl	8002d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d17c      	bne.n	8002cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_UART_Transmit+0x2c>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e075      	b.n	8002cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_UART_Transmit+0x3e>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e06e      	b.n	8002cda <HAL_UART_Transmit+0x11c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2221      	movs	r2, #33	; 0x21
 8002c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f9d9 	bl	8000fc8 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d108      	bne.n	8002c40 <HAL_UART_Transmit+0x82>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e003      	b.n	8002c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002c50:	e02a      	b.n	8002ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2180      	movs	r1, #128	; 0x80
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f840 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e036      	b.n	8002cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	3302      	adds	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e007      	b.n	8002c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1cf      	bne.n	8002c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f810 	bl	8002ce2 <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e006      	b.n	8002cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf2:	e02c      	b.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d028      	beq.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d02:	f7fe f961 	bl	8000fc8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d21d      	bcs.n	8002d4e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d20:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e00f      	b.n	8002d6e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d0c3      	beq.n	8002cf4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002db8:	f023 030c 	bic.w	r3, r3, #12
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	430b      	orrs	r3, r1
 8002dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <UART_SetConfig+0x1c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <UART_SetConfig+0x78>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a56      	ldr	r2, [pc, #344]	; (8002f44 <UART_SetConfig+0x1cc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d103      	bne.n	8002df8 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002df0:	f7ff fe76 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	e002      	b.n	8002dfe <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002df8:	f7ff fe50 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d14c      	bne.n	8002ea2 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	441a      	add	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	4a4a      	ldr	r2, [pc, #296]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	0119      	lsls	r1, r3, #4
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3e:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002e40:	fba3 0302 	umull	r0, r3, r3, r2
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	2064      	movs	r0, #100	; 0x64
 8002e48:	fb00 f303 	mul.w	r3, r0, r3
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3332      	adds	r3, #50	; 0x32
 8002e52:	4a3d      	ldr	r2, [pc, #244]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e60:	4419      	add	r1, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e78:	4b33      	ldr	r3, [pc, #204]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2064      	movs	r0, #100	; 0x64
 8002e82:	fb00 f303 	mul.w	r3, r0, r3
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	3332      	adds	r3, #50	; 0x32
 8002e8c:	4a2e      	ldr	r2, [pc, #184]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	f003 0207 	and.w	r2, r3, #7
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	440a      	add	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ea0:	e04a      	b.n	8002f38 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009a      	lsls	r2, r3, #2
 8002eac:	441a      	add	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	0119      	lsls	r1, r3, #4
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009a      	lsls	r2, r3, #2
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002eda:	fba3 0302 	umull	r0, r3, r3, r2
 8002ede:	095b      	lsrs	r3, r3, #5
 8002ee0:	2064      	movs	r0, #100	; 0x64
 8002ee2:	fb00 f303 	mul.w	r3, r0, r3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	3332      	adds	r3, #50	; 0x32
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef8:	4419      	add	r1, r3
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002f12:	fba3 0302 	umull	r0, r3, r3, r2
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2064      	movs	r0, #100	; 0x64
 8002f1a:	fb00 f303 	mul.w	r3, r0, r3
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	3332      	adds	r3, #50	; 0x32
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <UART_SetConfig+0x1d0>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	440a      	add	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40011000 	.word	0x40011000
 8002f44:	40011400 	.word	0x40011400
 8002f48:	51eb851f 	.word	0x51eb851f

08002f4c <calloc>:
 8002f4c:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <calloc+0xc>)
 8002f4e:	460a      	mov	r2, r1
 8002f50:	4601      	mov	r1, r0
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	f000 b842 	b.w	8002fdc <_calloc_r>
 8002f58:	2000000c 	.word	0x2000000c

08002f5c <__errno>:
 8002f5c:	4b01      	ldr	r3, [pc, #4]	; (8002f64 <__errno+0x8>)
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	2000000c 	.word	0x2000000c

08002f68 <__libc_init_array>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	2600      	movs	r6, #0
 8002f6c:	4d0c      	ldr	r5, [pc, #48]	; (8002fa0 <__libc_init_array+0x38>)
 8002f6e:	4c0d      	ldr	r4, [pc, #52]	; (8002fa4 <__libc_init_array+0x3c>)
 8002f70:	1b64      	subs	r4, r4, r5
 8002f72:	10a4      	asrs	r4, r4, #2
 8002f74:	42a6      	cmp	r6, r4
 8002f76:	d109      	bne.n	8002f8c <__libc_init_array+0x24>
 8002f78:	f000 fd00 	bl	800397c <_init>
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	4d0a      	ldr	r5, [pc, #40]	; (8002fa8 <__libc_init_array+0x40>)
 8002f80:	4c0a      	ldr	r4, [pc, #40]	; (8002fac <__libc_init_array+0x44>)
 8002f82:	1b64      	subs	r4, r4, r5
 8002f84:	10a4      	asrs	r4, r4, #2
 8002f86:	42a6      	cmp	r6, r4
 8002f88:	d105      	bne.n	8002f96 <__libc_init_array+0x2e>
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
 8002f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f90:	4798      	blx	r3
 8002f92:	3601      	adds	r6, #1
 8002f94:	e7ee      	b.n	8002f74 <__libc_init_array+0xc>
 8002f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f9a:	4798      	blx	r3
 8002f9c:	3601      	adds	r6, #1
 8002f9e:	e7f2      	b.n	8002f86 <__libc_init_array+0x1e>
 8002fa0:	08003a3c 	.word	0x08003a3c
 8002fa4:	08003a3c 	.word	0x08003a3c
 8002fa8:	08003a3c 	.word	0x08003a3c
 8002fac:	08003a40 	.word	0x08003a40

08002fb0 <memcpy>:
 8002fb0:	440a      	add	r2, r1
 8002fb2:	4291      	cmp	r1, r2
 8002fb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002fb8:	d100      	bne.n	8002fbc <memcpy+0xc>
 8002fba:	4770      	bx	lr
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fc2:	4291      	cmp	r1, r2
 8002fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fc8:	d1f9      	bne.n	8002fbe <memcpy+0xe>
 8002fca:	bd10      	pop	{r4, pc}

08002fcc <memset>:
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4402      	add	r2, r0
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <memset+0xa>
 8002fd4:	4770      	bx	lr
 8002fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fda:	e7f9      	b.n	8002fd0 <memset+0x4>

08002fdc <_calloc_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	fb02 f501 	mul.w	r5, r2, r1
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	f000 f854 	bl	8003090 <_malloc_r>
 8002fe8:	4604      	mov	r4, r0
 8002fea:	b118      	cbz	r0, 8002ff4 <_calloc_r+0x18>
 8002fec:	462a      	mov	r2, r5
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f7ff ffec 	bl	8002fcc <memset>
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}

08002ff8 <_free_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4605      	mov	r5, r0
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d043      	beq.n	8003088 <_free_r+0x90>
 8003000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003004:	1f0c      	subs	r4, r1, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	bfb8      	it	lt
 800300a:	18e4      	addlt	r4, r4, r3
 800300c:	f000 fbfe 	bl	800380c <__malloc_lock>
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <_free_r+0x94>)
 8003012:	6813      	ldr	r3, [r2, #0]
 8003014:	4610      	mov	r0, r2
 8003016:	b933      	cbnz	r3, 8003026 <_free_r+0x2e>
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	6014      	str	r4, [r2, #0]
 800301c:	4628      	mov	r0, r5
 800301e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003022:	f000 bbf9 	b.w	8003818 <__malloc_unlock>
 8003026:	42a3      	cmp	r3, r4
 8003028:	d90a      	bls.n	8003040 <_free_r+0x48>
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	1862      	adds	r2, r4, r1
 800302e:	4293      	cmp	r3, r2
 8003030:	bf01      	itttt	eq
 8003032:	681a      	ldreq	r2, [r3, #0]
 8003034:	685b      	ldreq	r3, [r3, #4]
 8003036:	1852      	addeq	r2, r2, r1
 8003038:	6022      	streq	r2, [r4, #0]
 800303a:	6063      	str	r3, [r4, #4]
 800303c:	6004      	str	r4, [r0, #0]
 800303e:	e7ed      	b.n	800301c <_free_r+0x24>
 8003040:	461a      	mov	r2, r3
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	b10b      	cbz	r3, 800304a <_free_r+0x52>
 8003046:	42a3      	cmp	r3, r4
 8003048:	d9fa      	bls.n	8003040 <_free_r+0x48>
 800304a:	6811      	ldr	r1, [r2, #0]
 800304c:	1850      	adds	r0, r2, r1
 800304e:	42a0      	cmp	r0, r4
 8003050:	d10b      	bne.n	800306a <_free_r+0x72>
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	4401      	add	r1, r0
 8003056:	1850      	adds	r0, r2, r1
 8003058:	4283      	cmp	r3, r0
 800305a:	6011      	str	r1, [r2, #0]
 800305c:	d1de      	bne.n	800301c <_free_r+0x24>
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4401      	add	r1, r0
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	6053      	str	r3, [r2, #4]
 8003068:	e7d8      	b.n	800301c <_free_r+0x24>
 800306a:	d902      	bls.n	8003072 <_free_r+0x7a>
 800306c:	230c      	movs	r3, #12
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	e7d4      	b.n	800301c <_free_r+0x24>
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	1821      	adds	r1, r4, r0
 8003076:	428b      	cmp	r3, r1
 8003078:	bf01      	itttt	eq
 800307a:	6819      	ldreq	r1, [r3, #0]
 800307c:	685b      	ldreq	r3, [r3, #4]
 800307e:	1809      	addeq	r1, r1, r0
 8003080:	6021      	streq	r1, [r4, #0]
 8003082:	6063      	str	r3, [r4, #4]
 8003084:	6054      	str	r4, [r2, #4]
 8003086:	e7c9      	b.n	800301c <_free_r+0x24>
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	20000094 	.word	0x20000094

08003090 <_malloc_r>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	1ccd      	adds	r5, r1, #3
 8003094:	f025 0503 	bic.w	r5, r5, #3
 8003098:	3508      	adds	r5, #8
 800309a:	2d0c      	cmp	r5, #12
 800309c:	bf38      	it	cc
 800309e:	250c      	movcc	r5, #12
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	4606      	mov	r6, r0
 80030a4:	db01      	blt.n	80030aa <_malloc_r+0x1a>
 80030a6:	42a9      	cmp	r1, r5
 80030a8:	d903      	bls.n	80030b2 <_malloc_r+0x22>
 80030aa:	230c      	movs	r3, #12
 80030ac:	6033      	str	r3, [r6, #0]
 80030ae:	2000      	movs	r0, #0
 80030b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b2:	f000 fbab 	bl	800380c <__malloc_lock>
 80030b6:	4921      	ldr	r1, [pc, #132]	; (800313c <_malloc_r+0xac>)
 80030b8:	680a      	ldr	r2, [r1, #0]
 80030ba:	4614      	mov	r4, r2
 80030bc:	b99c      	cbnz	r4, 80030e6 <_malloc_r+0x56>
 80030be:	4f20      	ldr	r7, [pc, #128]	; (8003140 <_malloc_r+0xb0>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b923      	cbnz	r3, 80030ce <_malloc_r+0x3e>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4630      	mov	r0, r6
 80030c8:	f000 f8b2 	bl	8003230 <_sbrk_r>
 80030cc:	6038      	str	r0, [r7, #0]
 80030ce:	4629      	mov	r1, r5
 80030d0:	4630      	mov	r0, r6
 80030d2:	f000 f8ad 	bl	8003230 <_sbrk_r>
 80030d6:	1c43      	adds	r3, r0, #1
 80030d8:	d123      	bne.n	8003122 <_malloc_r+0x92>
 80030da:	230c      	movs	r3, #12
 80030dc:	4630      	mov	r0, r6
 80030de:	6033      	str	r3, [r6, #0]
 80030e0:	f000 fb9a 	bl	8003818 <__malloc_unlock>
 80030e4:	e7e3      	b.n	80030ae <_malloc_r+0x1e>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	1b5b      	subs	r3, r3, r5
 80030ea:	d417      	bmi.n	800311c <_malloc_r+0x8c>
 80030ec:	2b0b      	cmp	r3, #11
 80030ee:	d903      	bls.n	80030f8 <_malloc_r+0x68>
 80030f0:	6023      	str	r3, [r4, #0]
 80030f2:	441c      	add	r4, r3
 80030f4:	6025      	str	r5, [r4, #0]
 80030f6:	e004      	b.n	8003102 <_malloc_r+0x72>
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	42a2      	cmp	r2, r4
 80030fc:	bf0c      	ite	eq
 80030fe:	600b      	streq	r3, [r1, #0]
 8003100:	6053      	strne	r3, [r2, #4]
 8003102:	4630      	mov	r0, r6
 8003104:	f000 fb88 	bl	8003818 <__malloc_unlock>
 8003108:	f104 000b 	add.w	r0, r4, #11
 800310c:	1d23      	adds	r3, r4, #4
 800310e:	f020 0007 	bic.w	r0, r0, #7
 8003112:	1ac2      	subs	r2, r0, r3
 8003114:	d0cc      	beq.n	80030b0 <_malloc_r+0x20>
 8003116:	1a1b      	subs	r3, r3, r0
 8003118:	50a3      	str	r3, [r4, r2]
 800311a:	e7c9      	b.n	80030b0 <_malloc_r+0x20>
 800311c:	4622      	mov	r2, r4
 800311e:	6864      	ldr	r4, [r4, #4]
 8003120:	e7cc      	b.n	80030bc <_malloc_r+0x2c>
 8003122:	1cc4      	adds	r4, r0, #3
 8003124:	f024 0403 	bic.w	r4, r4, #3
 8003128:	42a0      	cmp	r0, r4
 800312a:	d0e3      	beq.n	80030f4 <_malloc_r+0x64>
 800312c:	1a21      	subs	r1, r4, r0
 800312e:	4630      	mov	r0, r6
 8003130:	f000 f87e 	bl	8003230 <_sbrk_r>
 8003134:	3001      	adds	r0, #1
 8003136:	d1dd      	bne.n	80030f4 <_malloc_r+0x64>
 8003138:	e7cf      	b.n	80030da <_malloc_r+0x4a>
 800313a:	bf00      	nop
 800313c:	20000094 	.word	0x20000094
 8003140:	20000098 	.word	0x20000098

08003144 <_puts_r>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	460e      	mov	r6, r1
 8003148:	4605      	mov	r5, r0
 800314a:	b118      	cbz	r0, 8003154 <_puts_r+0x10>
 800314c:	6983      	ldr	r3, [r0, #24]
 800314e:	b90b      	cbnz	r3, 8003154 <_puts_r+0x10>
 8003150:	f000 fa58 	bl	8003604 <__sinit>
 8003154:	69ab      	ldr	r3, [r5, #24]
 8003156:	68ac      	ldr	r4, [r5, #8]
 8003158:	b913      	cbnz	r3, 8003160 <_puts_r+0x1c>
 800315a:	4628      	mov	r0, r5
 800315c:	f000 fa52 	bl	8003604 <__sinit>
 8003160:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <_puts_r+0xd0>)
 8003162:	429c      	cmp	r4, r3
 8003164:	d120      	bne.n	80031a8 <_puts_r+0x64>
 8003166:	686c      	ldr	r4, [r5, #4]
 8003168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800316a:	07db      	lsls	r3, r3, #31
 800316c:	d405      	bmi.n	800317a <_puts_r+0x36>
 800316e:	89a3      	ldrh	r3, [r4, #12]
 8003170:	0598      	lsls	r0, r3, #22
 8003172:	d402      	bmi.n	800317a <_puts_r+0x36>
 8003174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003176:	f000 fae3 	bl	8003740 <__retarget_lock_acquire_recursive>
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	0719      	lsls	r1, r3, #28
 800317e:	d51d      	bpl.n	80031bc <_puts_r+0x78>
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	b1db      	cbz	r3, 80031bc <_puts_r+0x78>
 8003184:	3e01      	subs	r6, #1
 8003186:	68a3      	ldr	r3, [r4, #8]
 8003188:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800318c:	3b01      	subs	r3, #1
 800318e:	60a3      	str	r3, [r4, #8]
 8003190:	bb39      	cbnz	r1, 80031e2 <_puts_r+0x9e>
 8003192:	2b00      	cmp	r3, #0
 8003194:	da38      	bge.n	8003208 <_puts_r+0xc4>
 8003196:	4622      	mov	r2, r4
 8003198:	210a      	movs	r1, #10
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f858 	bl	8003250 <__swbuf_r>
 80031a0:	3001      	adds	r0, #1
 80031a2:	d011      	beq.n	80031c8 <_puts_r+0x84>
 80031a4:	250a      	movs	r5, #10
 80031a6:	e011      	b.n	80031cc <_puts_r+0x88>
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <_puts_r+0xd4>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	d101      	bne.n	80031b2 <_puts_r+0x6e>
 80031ae:	68ac      	ldr	r4, [r5, #8]
 80031b0:	e7da      	b.n	8003168 <_puts_r+0x24>
 80031b2:	4b1a      	ldr	r3, [pc, #104]	; (800321c <_puts_r+0xd8>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	bf08      	it	eq
 80031b8:	68ec      	ldreq	r4, [r5, #12]
 80031ba:	e7d5      	b.n	8003168 <_puts_r+0x24>
 80031bc:	4621      	mov	r1, r4
 80031be:	4628      	mov	r0, r5
 80031c0:	f000 f898 	bl	80032f4 <__swsetup_r>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d0dd      	beq.n	8003184 <_puts_r+0x40>
 80031c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80031cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031ce:	07da      	lsls	r2, r3, #31
 80031d0:	d405      	bmi.n	80031de <_puts_r+0x9a>
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	059b      	lsls	r3, r3, #22
 80031d6:	d402      	bmi.n	80031de <_puts_r+0x9a>
 80031d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031da:	f000 fab2 	bl	8003742 <__retarget_lock_release_recursive>
 80031de:	4628      	mov	r0, r5
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	da04      	bge.n	80031f0 <_puts_r+0xac>
 80031e6:	69a2      	ldr	r2, [r4, #24]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dc06      	bgt.n	80031fa <_puts_r+0xb6>
 80031ec:	290a      	cmp	r1, #10
 80031ee:	d004      	beq.n	80031fa <_puts_r+0xb6>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	6022      	str	r2, [r4, #0]
 80031f6:	7019      	strb	r1, [r3, #0]
 80031f8:	e7c5      	b.n	8003186 <_puts_r+0x42>
 80031fa:	4622      	mov	r2, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	f000 f827 	bl	8003250 <__swbuf_r>
 8003202:	3001      	adds	r0, #1
 8003204:	d1bf      	bne.n	8003186 <_puts_r+0x42>
 8003206:	e7df      	b.n	80031c8 <_puts_r+0x84>
 8003208:	250a      	movs	r5, #10
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	6022      	str	r2, [r4, #0]
 8003210:	701d      	strb	r5, [r3, #0]
 8003212:	e7db      	b.n	80031cc <_puts_r+0x88>
 8003214:	080039f4 	.word	0x080039f4
 8003218:	08003a14 	.word	0x08003a14
 800321c:	080039d4 	.word	0x080039d4

08003220 <puts>:
 8003220:	4b02      	ldr	r3, [pc, #8]	; (800322c <puts+0xc>)
 8003222:	4601      	mov	r1, r0
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f7ff bf8d 	b.w	8003144 <_puts_r>
 800322a:	bf00      	nop
 800322c:	2000000c 	.word	0x2000000c

08003230 <_sbrk_r>:
 8003230:	b538      	push	{r3, r4, r5, lr}
 8003232:	2300      	movs	r3, #0
 8003234:	4d05      	ldr	r5, [pc, #20]	; (800324c <_sbrk_r+0x1c>)
 8003236:	4604      	mov	r4, r0
 8003238:	4608      	mov	r0, r1
 800323a:	602b      	str	r3, [r5, #0]
 800323c:	f7fd fd88 	bl	8000d50 <_sbrk>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d102      	bne.n	800324a <_sbrk_r+0x1a>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	b103      	cbz	r3, 800324a <_sbrk_r+0x1a>
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	20000164 	.word	0x20000164

08003250 <__swbuf_r>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	460e      	mov	r6, r1
 8003254:	4614      	mov	r4, r2
 8003256:	4605      	mov	r5, r0
 8003258:	b118      	cbz	r0, 8003262 <__swbuf_r+0x12>
 800325a:	6983      	ldr	r3, [r0, #24]
 800325c:	b90b      	cbnz	r3, 8003262 <__swbuf_r+0x12>
 800325e:	f000 f9d1 	bl	8003604 <__sinit>
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <__swbuf_r+0x98>)
 8003264:	429c      	cmp	r4, r3
 8003266:	d12b      	bne.n	80032c0 <__swbuf_r+0x70>
 8003268:	686c      	ldr	r4, [r5, #4]
 800326a:	69a3      	ldr	r3, [r4, #24]
 800326c:	60a3      	str	r3, [r4, #8]
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	071a      	lsls	r2, r3, #28
 8003272:	d52f      	bpl.n	80032d4 <__swbuf_r+0x84>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	b36b      	cbz	r3, 80032d4 <__swbuf_r+0x84>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	b2f6      	uxtb	r6, r6
 800327e:	1ac0      	subs	r0, r0, r3
 8003280:	6963      	ldr	r3, [r4, #20]
 8003282:	4637      	mov	r7, r6
 8003284:	4283      	cmp	r3, r0
 8003286:	dc04      	bgt.n	8003292 <__swbuf_r+0x42>
 8003288:	4621      	mov	r1, r4
 800328a:	4628      	mov	r0, r5
 800328c:	f000 f926 	bl	80034dc <_fflush_r>
 8003290:	bb30      	cbnz	r0, 80032e0 <__swbuf_r+0x90>
 8003292:	68a3      	ldr	r3, [r4, #8]
 8003294:	3001      	adds	r0, #1
 8003296:	3b01      	subs	r3, #1
 8003298:	60a3      	str	r3, [r4, #8]
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	6022      	str	r2, [r4, #0]
 80032a0:	701e      	strb	r6, [r3, #0]
 80032a2:	6963      	ldr	r3, [r4, #20]
 80032a4:	4283      	cmp	r3, r0
 80032a6:	d004      	beq.n	80032b2 <__swbuf_r+0x62>
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	07db      	lsls	r3, r3, #31
 80032ac:	d506      	bpl.n	80032bc <__swbuf_r+0x6c>
 80032ae:	2e0a      	cmp	r6, #10
 80032b0:	d104      	bne.n	80032bc <__swbuf_r+0x6c>
 80032b2:	4621      	mov	r1, r4
 80032b4:	4628      	mov	r0, r5
 80032b6:	f000 f911 	bl	80034dc <_fflush_r>
 80032ba:	b988      	cbnz	r0, 80032e0 <__swbuf_r+0x90>
 80032bc:	4638      	mov	r0, r7
 80032be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <__swbuf_r+0x9c>)
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d101      	bne.n	80032ca <__swbuf_r+0x7a>
 80032c6:	68ac      	ldr	r4, [r5, #8]
 80032c8:	e7cf      	b.n	800326a <__swbuf_r+0x1a>
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <__swbuf_r+0xa0>)
 80032cc:	429c      	cmp	r4, r3
 80032ce:	bf08      	it	eq
 80032d0:	68ec      	ldreq	r4, [r5, #12]
 80032d2:	e7ca      	b.n	800326a <__swbuf_r+0x1a>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f80c 	bl	80032f4 <__swsetup_r>
 80032dc:	2800      	cmp	r0, #0
 80032de:	d0cb      	beq.n	8003278 <__swbuf_r+0x28>
 80032e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80032e4:	e7ea      	b.n	80032bc <__swbuf_r+0x6c>
 80032e6:	bf00      	nop
 80032e8:	080039f4 	.word	0x080039f4
 80032ec:	08003a14 	.word	0x08003a14
 80032f0:	080039d4 	.word	0x080039d4

080032f4 <__swsetup_r>:
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <__swsetup_r+0xcc>)
 80032f6:	b570      	push	{r4, r5, r6, lr}
 80032f8:	681d      	ldr	r5, [r3, #0]
 80032fa:	4606      	mov	r6, r0
 80032fc:	460c      	mov	r4, r1
 80032fe:	b125      	cbz	r5, 800330a <__swsetup_r+0x16>
 8003300:	69ab      	ldr	r3, [r5, #24]
 8003302:	b913      	cbnz	r3, 800330a <__swsetup_r+0x16>
 8003304:	4628      	mov	r0, r5
 8003306:	f000 f97d 	bl	8003604 <__sinit>
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <__swsetup_r+0xd0>)
 800330c:	429c      	cmp	r4, r3
 800330e:	d10f      	bne.n	8003330 <__swsetup_r+0x3c>
 8003310:	686c      	ldr	r4, [r5, #4]
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003318:	0719      	lsls	r1, r3, #28
 800331a:	d42c      	bmi.n	8003376 <__swsetup_r+0x82>
 800331c:	06dd      	lsls	r5, r3, #27
 800331e:	d411      	bmi.n	8003344 <__swsetup_r+0x50>
 8003320:	2309      	movs	r3, #9
 8003322:	6033      	str	r3, [r6, #0]
 8003324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800332c:	81a3      	strh	r3, [r4, #12]
 800332e:	e03e      	b.n	80033ae <__swsetup_r+0xba>
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <__swsetup_r+0xd4>)
 8003332:	429c      	cmp	r4, r3
 8003334:	d101      	bne.n	800333a <__swsetup_r+0x46>
 8003336:	68ac      	ldr	r4, [r5, #8]
 8003338:	e7eb      	b.n	8003312 <__swsetup_r+0x1e>
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <__swsetup_r+0xd8>)
 800333c:	429c      	cmp	r4, r3
 800333e:	bf08      	it	eq
 8003340:	68ec      	ldreq	r4, [r5, #12]
 8003342:	e7e6      	b.n	8003312 <__swsetup_r+0x1e>
 8003344:	0758      	lsls	r0, r3, #29
 8003346:	d512      	bpl.n	800336e <__swsetup_r+0x7a>
 8003348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800334a:	b141      	cbz	r1, 800335e <__swsetup_r+0x6a>
 800334c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <__swsetup_r+0x66>
 8003354:	4630      	mov	r0, r6
 8003356:	f7ff fe4f 	bl	8002ff8 <_free_r>
 800335a:	2300      	movs	r3, #0
 800335c:	6363      	str	r3, [r4, #52]	; 0x34
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	2300      	movs	r3, #0
 8003368:	6063      	str	r3, [r4, #4]
 800336a:	6923      	ldr	r3, [r4, #16]
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	89a3      	ldrh	r3, [r4, #12]
 8003370:	f043 0308 	orr.w	r3, r3, #8
 8003374:	81a3      	strh	r3, [r4, #12]
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	b94b      	cbnz	r3, 800338e <__swsetup_r+0x9a>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d003      	beq.n	800338e <__swsetup_r+0x9a>
 8003386:	4621      	mov	r1, r4
 8003388:	4630      	mov	r0, r6
 800338a:	f000 f9ff 	bl	800378c <__smakebuf_r>
 800338e:	89a0      	ldrh	r0, [r4, #12]
 8003390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003394:	f010 0301 	ands.w	r3, r0, #1
 8003398:	d00a      	beq.n	80033b0 <__swsetup_r+0xbc>
 800339a:	2300      	movs	r3, #0
 800339c:	60a3      	str	r3, [r4, #8]
 800339e:	6963      	ldr	r3, [r4, #20]
 80033a0:	425b      	negs	r3, r3
 80033a2:	61a3      	str	r3, [r4, #24]
 80033a4:	6923      	ldr	r3, [r4, #16]
 80033a6:	b943      	cbnz	r3, 80033ba <__swsetup_r+0xc6>
 80033a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033ac:	d1ba      	bne.n	8003324 <__swsetup_r+0x30>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	0781      	lsls	r1, r0, #30
 80033b2:	bf58      	it	pl
 80033b4:	6963      	ldrpl	r3, [r4, #20]
 80033b6:	60a3      	str	r3, [r4, #8]
 80033b8:	e7f4      	b.n	80033a4 <__swsetup_r+0xb0>
 80033ba:	2000      	movs	r0, #0
 80033bc:	e7f7      	b.n	80033ae <__swsetup_r+0xba>
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	080039f4 	.word	0x080039f4
 80033c8:	08003a14 	.word	0x08003a14
 80033cc:	080039d4 	.word	0x080039d4

080033d0 <__sflush_r>:
 80033d0:	898a      	ldrh	r2, [r1, #12]
 80033d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d6:	4605      	mov	r5, r0
 80033d8:	0710      	lsls	r0, r2, #28
 80033da:	460c      	mov	r4, r1
 80033dc:	d458      	bmi.n	8003490 <__sflush_r+0xc0>
 80033de:	684b      	ldr	r3, [r1, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	dc05      	bgt.n	80033f0 <__sflush_r+0x20>
 80033e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dc02      	bgt.n	80033f0 <__sflush_r+0x20>
 80033ea:	2000      	movs	r0, #0
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033f2:	2e00      	cmp	r6, #0
 80033f4:	d0f9      	beq.n	80033ea <__sflush_r+0x1a>
 80033f6:	2300      	movs	r3, #0
 80033f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033fc:	682f      	ldr	r7, [r5, #0]
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	d032      	beq.n	8003468 <__sflush_r+0x98>
 8003402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	075a      	lsls	r2, r3, #29
 8003408:	d505      	bpl.n	8003416 <__sflush_r+0x46>
 800340a:	6863      	ldr	r3, [r4, #4]
 800340c:	1ac0      	subs	r0, r0, r3
 800340e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003410:	b10b      	cbz	r3, 8003416 <__sflush_r+0x46>
 8003412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003414:	1ac0      	subs	r0, r0, r3
 8003416:	2300      	movs	r3, #0
 8003418:	4602      	mov	r2, r0
 800341a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800341c:	4628      	mov	r0, r5
 800341e:	6a21      	ldr	r1, [r4, #32]
 8003420:	47b0      	blx	r6
 8003422:	1c43      	adds	r3, r0, #1
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	d106      	bne.n	8003436 <__sflush_r+0x66>
 8003428:	6829      	ldr	r1, [r5, #0]
 800342a:	291d      	cmp	r1, #29
 800342c:	d82c      	bhi.n	8003488 <__sflush_r+0xb8>
 800342e:	4a2a      	ldr	r2, [pc, #168]	; (80034d8 <__sflush_r+0x108>)
 8003430:	40ca      	lsrs	r2, r1
 8003432:	07d6      	lsls	r6, r2, #31
 8003434:	d528      	bpl.n	8003488 <__sflush_r+0xb8>
 8003436:	2200      	movs	r2, #0
 8003438:	6062      	str	r2, [r4, #4]
 800343a:	6922      	ldr	r2, [r4, #16]
 800343c:	04d9      	lsls	r1, r3, #19
 800343e:	6022      	str	r2, [r4, #0]
 8003440:	d504      	bpl.n	800344c <__sflush_r+0x7c>
 8003442:	1c42      	adds	r2, r0, #1
 8003444:	d101      	bne.n	800344a <__sflush_r+0x7a>
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	b903      	cbnz	r3, 800344c <__sflush_r+0x7c>
 800344a:	6560      	str	r0, [r4, #84]	; 0x54
 800344c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800344e:	602f      	str	r7, [r5, #0]
 8003450:	2900      	cmp	r1, #0
 8003452:	d0ca      	beq.n	80033ea <__sflush_r+0x1a>
 8003454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003458:	4299      	cmp	r1, r3
 800345a:	d002      	beq.n	8003462 <__sflush_r+0x92>
 800345c:	4628      	mov	r0, r5
 800345e:	f7ff fdcb 	bl	8002ff8 <_free_r>
 8003462:	2000      	movs	r0, #0
 8003464:	6360      	str	r0, [r4, #52]	; 0x34
 8003466:	e7c1      	b.n	80033ec <__sflush_r+0x1c>
 8003468:	6a21      	ldr	r1, [r4, #32]
 800346a:	2301      	movs	r3, #1
 800346c:	4628      	mov	r0, r5
 800346e:	47b0      	blx	r6
 8003470:	1c41      	adds	r1, r0, #1
 8003472:	d1c7      	bne.n	8003404 <__sflush_r+0x34>
 8003474:	682b      	ldr	r3, [r5, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0c4      	beq.n	8003404 <__sflush_r+0x34>
 800347a:	2b1d      	cmp	r3, #29
 800347c:	d001      	beq.n	8003482 <__sflush_r+0xb2>
 800347e:	2b16      	cmp	r3, #22
 8003480:	d101      	bne.n	8003486 <__sflush_r+0xb6>
 8003482:	602f      	str	r7, [r5, #0]
 8003484:	e7b1      	b.n	80033ea <__sflush_r+0x1a>
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	e7ad      	b.n	80033ec <__sflush_r+0x1c>
 8003490:	690f      	ldr	r7, [r1, #16]
 8003492:	2f00      	cmp	r7, #0
 8003494:	d0a9      	beq.n	80033ea <__sflush_r+0x1a>
 8003496:	0793      	lsls	r3, r2, #30
 8003498:	bf18      	it	ne
 800349a:	2300      	movne	r3, #0
 800349c:	680e      	ldr	r6, [r1, #0]
 800349e:	bf08      	it	eq
 80034a0:	694b      	ldreq	r3, [r1, #20]
 80034a2:	eba6 0807 	sub.w	r8, r6, r7
 80034a6:	600f      	str	r7, [r1, #0]
 80034a8:	608b      	str	r3, [r1, #8]
 80034aa:	f1b8 0f00 	cmp.w	r8, #0
 80034ae:	dd9c      	ble.n	80033ea <__sflush_r+0x1a>
 80034b0:	4643      	mov	r3, r8
 80034b2:	463a      	mov	r2, r7
 80034b4:	4628      	mov	r0, r5
 80034b6:	6a21      	ldr	r1, [r4, #32]
 80034b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80034ba:	47b0      	blx	r6
 80034bc:	2800      	cmp	r0, #0
 80034be:	dc06      	bgt.n	80034ce <__sflush_r+0xfe>
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ca:	81a3      	strh	r3, [r4, #12]
 80034cc:	e78e      	b.n	80033ec <__sflush_r+0x1c>
 80034ce:	4407      	add	r7, r0
 80034d0:	eba8 0800 	sub.w	r8, r8, r0
 80034d4:	e7e9      	b.n	80034aa <__sflush_r+0xda>
 80034d6:	bf00      	nop
 80034d8:	20400001 	.word	0x20400001

080034dc <_fflush_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	690b      	ldr	r3, [r1, #16]
 80034e0:	4605      	mov	r5, r0
 80034e2:	460c      	mov	r4, r1
 80034e4:	b913      	cbnz	r3, 80034ec <_fflush_r+0x10>
 80034e6:	2500      	movs	r5, #0
 80034e8:	4628      	mov	r0, r5
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	b118      	cbz	r0, 80034f6 <_fflush_r+0x1a>
 80034ee:	6983      	ldr	r3, [r0, #24]
 80034f0:	b90b      	cbnz	r3, 80034f6 <_fflush_r+0x1a>
 80034f2:	f000 f887 	bl	8003604 <__sinit>
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <_fflush_r+0x6c>)
 80034f8:	429c      	cmp	r4, r3
 80034fa:	d11b      	bne.n	8003534 <_fflush_r+0x58>
 80034fc:	686c      	ldr	r4, [r5, #4]
 80034fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ef      	beq.n	80034e6 <_fflush_r+0xa>
 8003506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003508:	07d0      	lsls	r0, r2, #31
 800350a:	d404      	bmi.n	8003516 <_fflush_r+0x3a>
 800350c:	0599      	lsls	r1, r3, #22
 800350e:	d402      	bmi.n	8003516 <_fflush_r+0x3a>
 8003510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003512:	f000 f915 	bl	8003740 <__retarget_lock_acquire_recursive>
 8003516:	4628      	mov	r0, r5
 8003518:	4621      	mov	r1, r4
 800351a:	f7ff ff59 	bl	80033d0 <__sflush_r>
 800351e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003520:	4605      	mov	r5, r0
 8003522:	07da      	lsls	r2, r3, #31
 8003524:	d4e0      	bmi.n	80034e8 <_fflush_r+0xc>
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	059b      	lsls	r3, r3, #22
 800352a:	d4dd      	bmi.n	80034e8 <_fflush_r+0xc>
 800352c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800352e:	f000 f908 	bl	8003742 <__retarget_lock_release_recursive>
 8003532:	e7d9      	b.n	80034e8 <_fflush_r+0xc>
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <_fflush_r+0x70>)
 8003536:	429c      	cmp	r4, r3
 8003538:	d101      	bne.n	800353e <_fflush_r+0x62>
 800353a:	68ac      	ldr	r4, [r5, #8]
 800353c:	e7df      	b.n	80034fe <_fflush_r+0x22>
 800353e:	4b04      	ldr	r3, [pc, #16]	; (8003550 <_fflush_r+0x74>)
 8003540:	429c      	cmp	r4, r3
 8003542:	bf08      	it	eq
 8003544:	68ec      	ldreq	r4, [r5, #12]
 8003546:	e7da      	b.n	80034fe <_fflush_r+0x22>
 8003548:	080039f4 	.word	0x080039f4
 800354c:	08003a14 	.word	0x08003a14
 8003550:	080039d4 	.word	0x080039d4

08003554 <std>:
 8003554:	2300      	movs	r3, #0
 8003556:	b510      	push	{r4, lr}
 8003558:	4604      	mov	r4, r0
 800355a:	e9c0 3300 	strd	r3, r3, [r0]
 800355e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003562:	6083      	str	r3, [r0, #8]
 8003564:	8181      	strh	r1, [r0, #12]
 8003566:	6643      	str	r3, [r0, #100]	; 0x64
 8003568:	81c2      	strh	r2, [r0, #14]
 800356a:	6183      	str	r3, [r0, #24]
 800356c:	4619      	mov	r1, r3
 800356e:	2208      	movs	r2, #8
 8003570:	305c      	adds	r0, #92	; 0x5c
 8003572:	f7ff fd2b 	bl	8002fcc <memset>
 8003576:	4b05      	ldr	r3, [pc, #20]	; (800358c <std+0x38>)
 8003578:	6224      	str	r4, [r4, #32]
 800357a:	6263      	str	r3, [r4, #36]	; 0x24
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <std+0x3c>)
 800357e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <std+0x40>)
 8003582:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <std+0x44>)
 8003586:	6323      	str	r3, [r4, #48]	; 0x30
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop
 800358c:	08003825 	.word	0x08003825
 8003590:	08003847 	.word	0x08003847
 8003594:	0800387f 	.word	0x0800387f
 8003598:	080038a3 	.word	0x080038a3

0800359c <_cleanup_r>:
 800359c:	4901      	ldr	r1, [pc, #4]	; (80035a4 <_cleanup_r+0x8>)
 800359e:	f000 b8af 	b.w	8003700 <_fwalk_reent>
 80035a2:	bf00      	nop
 80035a4:	080034dd 	.word	0x080034dd

080035a8 <__sfmoreglue>:
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	2568      	movs	r5, #104	; 0x68
 80035ac:	1e4a      	subs	r2, r1, #1
 80035ae:	4355      	muls	r5, r2
 80035b0:	460e      	mov	r6, r1
 80035b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035b6:	f7ff fd6b 	bl	8003090 <_malloc_r>
 80035ba:	4604      	mov	r4, r0
 80035bc:	b140      	cbz	r0, 80035d0 <__sfmoreglue+0x28>
 80035be:	2100      	movs	r1, #0
 80035c0:	e9c0 1600 	strd	r1, r6, [r0]
 80035c4:	300c      	adds	r0, #12
 80035c6:	60a0      	str	r0, [r4, #8]
 80035c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035cc:	f7ff fcfe 	bl	8002fcc <memset>
 80035d0:	4620      	mov	r0, r4
 80035d2:	bd70      	pop	{r4, r5, r6, pc}

080035d4 <__sfp_lock_acquire>:
 80035d4:	4801      	ldr	r0, [pc, #4]	; (80035dc <__sfp_lock_acquire+0x8>)
 80035d6:	f000 b8b3 	b.w	8003740 <__retarget_lock_acquire_recursive>
 80035da:	bf00      	nop
 80035dc:	20000160 	.word	0x20000160

080035e0 <__sfp_lock_release>:
 80035e0:	4801      	ldr	r0, [pc, #4]	; (80035e8 <__sfp_lock_release+0x8>)
 80035e2:	f000 b8ae 	b.w	8003742 <__retarget_lock_release_recursive>
 80035e6:	bf00      	nop
 80035e8:	20000160 	.word	0x20000160

080035ec <__sinit_lock_acquire>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__sinit_lock_acquire+0x8>)
 80035ee:	f000 b8a7 	b.w	8003740 <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	2000015b 	.word	0x2000015b

080035f8 <__sinit_lock_release>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__sinit_lock_release+0x8>)
 80035fa:	f000 b8a2 	b.w	8003742 <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	2000015b 	.word	0x2000015b

08003604 <__sinit>:
 8003604:	b510      	push	{r4, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	f7ff fff0 	bl	80035ec <__sinit_lock_acquire>
 800360c:	69a3      	ldr	r3, [r4, #24]
 800360e:	b11b      	cbz	r3, 8003618 <__sinit+0x14>
 8003610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003614:	f7ff bff0 	b.w	80035f8 <__sinit_lock_release>
 8003618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800361c:	6523      	str	r3, [r4, #80]	; 0x50
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <__sinit+0x68>)
 8003620:	4a13      	ldr	r2, [pc, #76]	; (8003670 <__sinit+0x6c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	62a2      	str	r2, [r4, #40]	; 0x28
 8003626:	42a3      	cmp	r3, r4
 8003628:	bf08      	it	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	4620      	mov	r0, r4
 800362e:	bf08      	it	eq
 8003630:	61a3      	streq	r3, [r4, #24]
 8003632:	f000 f81f 	bl	8003674 <__sfp>
 8003636:	6060      	str	r0, [r4, #4]
 8003638:	4620      	mov	r0, r4
 800363a:	f000 f81b 	bl	8003674 <__sfp>
 800363e:	60a0      	str	r0, [r4, #8]
 8003640:	4620      	mov	r0, r4
 8003642:	f000 f817 	bl	8003674 <__sfp>
 8003646:	2200      	movs	r2, #0
 8003648:	2104      	movs	r1, #4
 800364a:	60e0      	str	r0, [r4, #12]
 800364c:	6860      	ldr	r0, [r4, #4]
 800364e:	f7ff ff81 	bl	8003554 <std>
 8003652:	2201      	movs	r2, #1
 8003654:	2109      	movs	r1, #9
 8003656:	68a0      	ldr	r0, [r4, #8]
 8003658:	f7ff ff7c 	bl	8003554 <std>
 800365c:	2202      	movs	r2, #2
 800365e:	2112      	movs	r1, #18
 8003660:	68e0      	ldr	r0, [r4, #12]
 8003662:	f7ff ff77 	bl	8003554 <std>
 8003666:	2301      	movs	r3, #1
 8003668:	61a3      	str	r3, [r4, #24]
 800366a:	e7d1      	b.n	8003610 <__sinit+0xc>
 800366c:	080039d0 	.word	0x080039d0
 8003670:	0800359d 	.word	0x0800359d

08003674 <__sfp>:
 8003674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003676:	4607      	mov	r7, r0
 8003678:	f7ff ffac 	bl	80035d4 <__sfp_lock_acquire>
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <__sfp+0x84>)
 800367e:	681e      	ldr	r6, [r3, #0]
 8003680:	69b3      	ldr	r3, [r6, #24]
 8003682:	b913      	cbnz	r3, 800368a <__sfp+0x16>
 8003684:	4630      	mov	r0, r6
 8003686:	f7ff ffbd 	bl	8003604 <__sinit>
 800368a:	3648      	adds	r6, #72	; 0x48
 800368c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003690:	3b01      	subs	r3, #1
 8003692:	d503      	bpl.n	800369c <__sfp+0x28>
 8003694:	6833      	ldr	r3, [r6, #0]
 8003696:	b30b      	cbz	r3, 80036dc <__sfp+0x68>
 8003698:	6836      	ldr	r6, [r6, #0]
 800369a:	e7f7      	b.n	800368c <__sfp+0x18>
 800369c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036a0:	b9d5      	cbnz	r5, 80036d8 <__sfp+0x64>
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <__sfp+0x88>)
 80036a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036a8:	60e3      	str	r3, [r4, #12]
 80036aa:	6665      	str	r5, [r4, #100]	; 0x64
 80036ac:	f000 f847 	bl	800373e <__retarget_lock_init_recursive>
 80036b0:	f7ff ff96 	bl	80035e0 <__sfp_lock_release>
 80036b4:	2208      	movs	r2, #8
 80036b6:	4629      	mov	r1, r5
 80036b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036c0:	6025      	str	r5, [r4, #0]
 80036c2:	61a5      	str	r5, [r4, #24]
 80036c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036c8:	f7ff fc80 	bl	8002fcc <memset>
 80036cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036d4:	4620      	mov	r0, r4
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d8:	3468      	adds	r4, #104	; 0x68
 80036da:	e7d9      	b.n	8003690 <__sfp+0x1c>
 80036dc:	2104      	movs	r1, #4
 80036de:	4638      	mov	r0, r7
 80036e0:	f7ff ff62 	bl	80035a8 <__sfmoreglue>
 80036e4:	4604      	mov	r4, r0
 80036e6:	6030      	str	r0, [r6, #0]
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d1d5      	bne.n	8003698 <__sfp+0x24>
 80036ec:	f7ff ff78 	bl	80035e0 <__sfp_lock_release>
 80036f0:	230c      	movs	r3, #12
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	e7ee      	b.n	80036d4 <__sfp+0x60>
 80036f6:	bf00      	nop
 80036f8:	080039d0 	.word	0x080039d0
 80036fc:	ffff0001 	.word	0xffff0001

08003700 <_fwalk_reent>:
 8003700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003704:	4606      	mov	r6, r0
 8003706:	4688      	mov	r8, r1
 8003708:	2700      	movs	r7, #0
 800370a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800370e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003712:	f1b9 0901 	subs.w	r9, r9, #1
 8003716:	d505      	bpl.n	8003724 <_fwalk_reent+0x24>
 8003718:	6824      	ldr	r4, [r4, #0]
 800371a:	2c00      	cmp	r4, #0
 800371c:	d1f7      	bne.n	800370e <_fwalk_reent+0xe>
 800371e:	4638      	mov	r0, r7
 8003720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003724:	89ab      	ldrh	r3, [r5, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d907      	bls.n	800373a <_fwalk_reent+0x3a>
 800372a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800372e:	3301      	adds	r3, #1
 8003730:	d003      	beq.n	800373a <_fwalk_reent+0x3a>
 8003732:	4629      	mov	r1, r5
 8003734:	4630      	mov	r0, r6
 8003736:	47c0      	blx	r8
 8003738:	4307      	orrs	r7, r0
 800373a:	3568      	adds	r5, #104	; 0x68
 800373c:	e7e9      	b.n	8003712 <_fwalk_reent+0x12>

0800373e <__retarget_lock_init_recursive>:
 800373e:	4770      	bx	lr

08003740 <__retarget_lock_acquire_recursive>:
 8003740:	4770      	bx	lr

08003742 <__retarget_lock_release_recursive>:
 8003742:	4770      	bx	lr

08003744 <__swhatbuf_r>:
 8003744:	b570      	push	{r4, r5, r6, lr}
 8003746:	460e      	mov	r6, r1
 8003748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374c:	4614      	mov	r4, r2
 800374e:	2900      	cmp	r1, #0
 8003750:	461d      	mov	r5, r3
 8003752:	b096      	sub	sp, #88	; 0x58
 8003754:	da07      	bge.n	8003766 <__swhatbuf_r+0x22>
 8003756:	2300      	movs	r3, #0
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	89b3      	ldrh	r3, [r6, #12]
 800375c:	061a      	lsls	r2, r3, #24
 800375e:	d410      	bmi.n	8003782 <__swhatbuf_r+0x3e>
 8003760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003764:	e00e      	b.n	8003784 <__swhatbuf_r+0x40>
 8003766:	466a      	mov	r2, sp
 8003768:	f000 f8c2 	bl	80038f0 <_fstat_r>
 800376c:	2800      	cmp	r0, #0
 800376e:	dbf2      	blt.n	8003756 <__swhatbuf_r+0x12>
 8003770:	9a01      	ldr	r2, [sp, #4]
 8003772:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003776:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800377a:	425a      	negs	r2, r3
 800377c:	415a      	adcs	r2, r3
 800377e:	602a      	str	r2, [r5, #0]
 8003780:	e7ee      	b.n	8003760 <__swhatbuf_r+0x1c>
 8003782:	2340      	movs	r3, #64	; 0x40
 8003784:	2000      	movs	r0, #0
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	b016      	add	sp, #88	; 0x58
 800378a:	bd70      	pop	{r4, r5, r6, pc}

0800378c <__smakebuf_r>:
 800378c:	898b      	ldrh	r3, [r1, #12]
 800378e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003790:	079d      	lsls	r5, r3, #30
 8003792:	4606      	mov	r6, r0
 8003794:	460c      	mov	r4, r1
 8003796:	d507      	bpl.n	80037a8 <__smakebuf_r+0x1c>
 8003798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	2301      	movs	r3, #1
 80037a2:	6163      	str	r3, [r4, #20]
 80037a4:	b002      	add	sp, #8
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	466a      	mov	r2, sp
 80037aa:	ab01      	add	r3, sp, #4
 80037ac:	f7ff ffca 	bl	8003744 <__swhatbuf_r>
 80037b0:	9900      	ldr	r1, [sp, #0]
 80037b2:	4605      	mov	r5, r0
 80037b4:	4630      	mov	r0, r6
 80037b6:	f7ff fc6b 	bl	8003090 <_malloc_r>
 80037ba:	b948      	cbnz	r0, 80037d0 <__smakebuf_r+0x44>
 80037bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c0:	059a      	lsls	r2, r3, #22
 80037c2:	d4ef      	bmi.n	80037a4 <__smakebuf_r+0x18>
 80037c4:	f023 0303 	bic.w	r3, r3, #3
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	e7e3      	b.n	8003798 <__smakebuf_r+0xc>
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <__smakebuf_r+0x7c>)
 80037d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	6020      	str	r0, [r4, #0]
 80037d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037dc:	81a3      	strh	r3, [r4, #12]
 80037de:	9b00      	ldr	r3, [sp, #0]
 80037e0:	6120      	str	r0, [r4, #16]
 80037e2:	6163      	str	r3, [r4, #20]
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	b15b      	cbz	r3, 8003800 <__smakebuf_r+0x74>
 80037e8:	4630      	mov	r0, r6
 80037ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037ee:	f000 f891 	bl	8003914 <_isatty_r>
 80037f2:	b128      	cbz	r0, 8003800 <__smakebuf_r+0x74>
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	89a0      	ldrh	r0, [r4, #12]
 8003802:	4305      	orrs	r5, r0
 8003804:	81a5      	strh	r5, [r4, #12]
 8003806:	e7cd      	b.n	80037a4 <__smakebuf_r+0x18>
 8003808:	0800359d 	.word	0x0800359d

0800380c <__malloc_lock>:
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <__malloc_lock+0x8>)
 800380e:	f7ff bf97 	b.w	8003740 <__retarget_lock_acquire_recursive>
 8003812:	bf00      	nop
 8003814:	2000015c 	.word	0x2000015c

08003818 <__malloc_unlock>:
 8003818:	4801      	ldr	r0, [pc, #4]	; (8003820 <__malloc_unlock+0x8>)
 800381a:	f7ff bf92 	b.w	8003742 <__retarget_lock_release_recursive>
 800381e:	bf00      	nop
 8003820:	2000015c 	.word	0x2000015c

08003824 <__sread>:
 8003824:	b510      	push	{r4, lr}
 8003826:	460c      	mov	r4, r1
 8003828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382c:	f000 f894 	bl	8003958 <_read_r>
 8003830:	2800      	cmp	r0, #0
 8003832:	bfab      	itete	ge
 8003834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003836:	89a3      	ldrhlt	r3, [r4, #12]
 8003838:	181b      	addge	r3, r3, r0
 800383a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800383e:	bfac      	ite	ge
 8003840:	6563      	strge	r3, [r4, #84]	; 0x54
 8003842:	81a3      	strhlt	r3, [r4, #12]
 8003844:	bd10      	pop	{r4, pc}

08003846 <__swrite>:
 8003846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384a:	461f      	mov	r7, r3
 800384c:	898b      	ldrh	r3, [r1, #12]
 800384e:	4605      	mov	r5, r0
 8003850:	05db      	lsls	r3, r3, #23
 8003852:	460c      	mov	r4, r1
 8003854:	4616      	mov	r6, r2
 8003856:	d505      	bpl.n	8003864 <__swrite+0x1e>
 8003858:	2302      	movs	r3, #2
 800385a:	2200      	movs	r2, #0
 800385c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003860:	f000 f868 	bl	8003934 <_lseek_r>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	4632      	mov	r2, r6
 8003868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800386c:	81a3      	strh	r3, [r4, #12]
 800386e:	4628      	mov	r0, r5
 8003870:	463b      	mov	r3, r7
 8003872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800387a:	f000 b817 	b.w	80038ac <_write_r>

0800387e <__sseek>:
 800387e:	b510      	push	{r4, lr}
 8003880:	460c      	mov	r4, r1
 8003882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003886:	f000 f855 	bl	8003934 <_lseek_r>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	bf15      	itete	ne
 8003890:	6560      	strne	r0, [r4, #84]	; 0x54
 8003892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800389a:	81a3      	strheq	r3, [r4, #12]
 800389c:	bf18      	it	ne
 800389e:	81a3      	strhne	r3, [r4, #12]
 80038a0:	bd10      	pop	{r4, pc}

080038a2 <__sclose>:
 80038a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a6:	f000 b813 	b.w	80038d0 <_close_r>
	...

080038ac <_write_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	2200      	movs	r2, #0
 80038b6:	4d05      	ldr	r5, [pc, #20]	; (80038cc <_write_r+0x20>)
 80038b8:	602a      	str	r2, [r5, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f7fd f904 	bl	8000ac8 <_write>
 80038c0:	1c43      	adds	r3, r0, #1
 80038c2:	d102      	bne.n	80038ca <_write_r+0x1e>
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	b103      	cbz	r3, 80038ca <_write_r+0x1e>
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
 80038cc:	20000164 	.word	0x20000164

080038d0 <_close_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	2300      	movs	r3, #0
 80038d4:	4d05      	ldr	r5, [pc, #20]	; (80038ec <_close_r+0x1c>)
 80038d6:	4604      	mov	r4, r0
 80038d8:	4608      	mov	r0, r1
 80038da:	602b      	str	r3, [r5, #0]
 80038dc:	f7fd fa07 	bl	8000cee <_close>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_close_r+0x1a>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_close_r+0x1a>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	20000164 	.word	0x20000164

080038f0 <_fstat_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	2300      	movs	r3, #0
 80038f4:	4d06      	ldr	r5, [pc, #24]	; (8003910 <_fstat_r+0x20>)
 80038f6:	4604      	mov	r4, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	602b      	str	r3, [r5, #0]
 80038fe:	f7fd fa01 	bl	8000d04 <_fstat>
 8003902:	1c43      	adds	r3, r0, #1
 8003904:	d102      	bne.n	800390c <_fstat_r+0x1c>
 8003906:	682b      	ldr	r3, [r5, #0]
 8003908:	b103      	cbz	r3, 800390c <_fstat_r+0x1c>
 800390a:	6023      	str	r3, [r4, #0]
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	20000164 	.word	0x20000164

08003914 <_isatty_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	2300      	movs	r3, #0
 8003918:	4d05      	ldr	r5, [pc, #20]	; (8003930 <_isatty_r+0x1c>)
 800391a:	4604      	mov	r4, r0
 800391c:	4608      	mov	r0, r1
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	f7fd f9ff 	bl	8000d22 <_isatty>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d102      	bne.n	800392e <_isatty_r+0x1a>
 8003928:	682b      	ldr	r3, [r5, #0]
 800392a:	b103      	cbz	r3, 800392e <_isatty_r+0x1a>
 800392c:	6023      	str	r3, [r4, #0]
 800392e:	bd38      	pop	{r3, r4, r5, pc}
 8003930:	20000164 	.word	0x20000164

08003934 <_lseek_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	2200      	movs	r2, #0
 800393e:	4d05      	ldr	r5, [pc, #20]	; (8003954 <_lseek_r+0x20>)
 8003940:	602a      	str	r2, [r5, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f7fd f9f7 	bl	8000d36 <_lseek>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_lseek_r+0x1e>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_lseek_r+0x1e>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	20000164 	.word	0x20000164

08003958 <_read_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	2200      	movs	r2, #0
 8003962:	4d05      	ldr	r5, [pc, #20]	; (8003978 <_read_r+0x20>)
 8003964:	602a      	str	r2, [r5, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	f7fd f9a4 	bl	8000cb4 <_read>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d102      	bne.n	8003976 <_read_r+0x1e>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	b103      	cbz	r3, 8003976 <_read_r+0x1e>
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	bd38      	pop	{r3, r4, r5, pc}
 8003978:	20000164 	.word	0x20000164

0800397c <_init>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	bf00      	nop
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr

08003988 <_fini>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	bf00      	nop
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr
